namespace eval ::Photon {

variable answerback_debug 0

proc putdown { data } {
  cr::write $data
}

proc idle_cr_handler { } {
  cr::read
}

proc game_cr_handler_wrapper { } {
  if {[catch {game_cr_handler} error]} {
    ::warninglog "game_cr_handler: $error"
  }
  return -code ok
}

# Called from game_cr_handler every event read from the central radio while
# the game is active.
proc game_cr_event_handler { serialnum slot action data } {
  namespace eval ::Photon::cr_state {
    if { "$action" == "xx" } {
      ::debuglog "null action from cr_read"
    } elseif { ( "$action" == "rx" ) || ( "$action" == "tx" ) } {
      if { $slot == 0 } {    
        ::Photon::pp::RecordPoll    
        # mark slots that we didn't receive anything in
        # during this poll
        for { set i 0 } { $i < 67 } { incr i } {
          if { $radiodata_rx_sn($i) != $::Photon::lastpollsn } {
            ::Photon::pp::RecordMissedRx $i
            if { $radiodata_rx_x($i) != ".." } {
              set radiodata_rx($i) 0
              set radiodata_rx_x($i) ".."
              set radiodata_rx_sn($i) $::Photon::lastpollsn
            }
          }       
          if { $radiodata_tx_sn($i) != $::Photon::lastpollsn } {
            if { $radiodata_tx_x($i) != ".." } {
              set radiodata_tx($i) 0
              set radiodata_tx_x($i) ".."
              set radiodata_tx_sn($i) $::Photon::lastpollsn
            }
          }
        }
        
        # update lastpollsn, and check for skippage
        if { $::Photon::lastpollsn == -1 } {
          set ::Photon::lastpollsn $serialnum
        } else {
          incr ::Photon::lastpollsn
          if { $::Photon::lastpollsn == 256 } {
            set ::Photon::lastpollsn 0
          }
          if { $::Photon::lastpollsn != $serialnum } {
            ::warninglog "Skipped Poll: $Photon::lastpollsn != $serialnum"
            set ::Photon::lastpollsn $serialnum
          }
        }
      }

      if { "$action" == "rx" } {
        set radiodata_rx($slot) $data
        set radiodata_rx_x($slot) [ format "%02x" $data ]
        set radiodata_rx_sn($slot) $serialnum
      } elseif { "$action" == "tx" } {
        set radiodata_tx($slot) $data
        set radiodata_tx_x($slot) [ format "%02x" $data ]
        set radiodata_tx_sn($slot) $serialnum
      }

      if { $slot != 0 } {
        if {[catch {
            namespace eval ::Photon $::Photon::slot_op($data) $slot \
                $action $data} error]} {
          ::debuglog "error in slot_op eval: \
                      $::Photon::slot_op($data) $slot $action $data -- $x $error"
        }
      }
    }
    return -code ok
  }
}

proc game_cr_handler { } {  
  namespace eval ::Photon::cr_state {
    variable cr_lock
    variable cr_list

    if { $cr_lock != 0 } {
      puts "already in loop"
      return -code ok
    }

    set cr_lock 1

    lappend cr_list [ ::Photon::cr::read ]
  
    # while we have stuff in our list, execute the following:
    # note, we're probably appending to this all of the time      

    while { [ llength $cr_list ] } {
      set qlen [ llength $cr_list ]

      if { $qlen != 1 } {
        ::debuglog "length of queue: $qlen"
      }
    
      set indata [ lindex $cr_list 0 ]

      set cr_list [ lrange $cr_list 1 end ]
    
      set indata [ string trim $indata "{}"]
      set indata [ string trimleft $indata "{}"]
    
      set list_indata [ split $indata " " ]

      set serialnum [ lindex $list_indata 0 ]
      set slot [ lindex $list_indata 1 ]
      set action [ lindex $list_indata 2 ]
      set data [ lindex $list_indata 3 ]

      if { $data == "" } {
        continue
      }

      set e [ catch {
        namespace eval ::Photon game_cr_event_handler $serialnum $slot \
        $action $data
      } x ]
      if { $e != 0 } {
        ::debuglog "error in event handler $serialnum $slot $action $data - $x"
      }
    }
    set cr_lock 0
    return -code ok
  }
  # namespace cr_state
}

proc init { } {
  variable debug
  variable slot_op
  variable answerback_debug
  variable cr_lock
  variable slot_used
  source $Conf::libpath/cr
  source $Conf::libpath/pod_performance
  
  ::Photon::cr::init [ namespace code idle_cr_handler ]
  
  # initialized pod performance data
  ::Photon::pp::init
  
  set cr_lock 0
  set answerback_debug 0
  
  namespace eval cr_state {
    set lastslotid 1
    for { set i 0 } { $i < 68 } { incr i } {
      set radiodata_rx($i) 0
      set radiodata_rx_sn($i) 0
      set radiodata_rx_x($i) "--"
      set radiodata_tx($i) 0
      set radiodata_tx_sn($i) 0
      set radiodata_tx_x($i) "--"
    }
    set radio_watchlist { radiodata_rx_x radiodata_tx_x }
  }

  for { set i 0 } { $i < 40 } { incr i } {
    set slot_used($i) 0
  }

  if { $debug == 1 } {
    ::debuglog "photon: cr enable/init complete"
  }
  
  menu .menubar.photon -tearoff 0
  ::.menubar add cascade -label Photon -menu .menubar.photon
  .menubar.photon add check -label Debug -variable Photon::debug

  menu .menubar.photon.sync -tearoff 1
  .menubar.photon add cascade -label Sync -menu .menubar.photon.sync
  .menubar.photon.sync add radio -label PSYNC -variable Photon::currentsyncbin \
      -value $Photon::PSYNC -command { Photon::setsync $Photon::PSYNC }
  .menubar.photon.sync add radio -label GSYNC -variable Photon::currentsyncbin \
      -value $Photon::GSYNC -command { Photon::setsync $Photon::GSYNC }
  .menubar.photon.sync add radio -label ESYNC -variable Photon::currentsyncbin \
      -value $Photon::ESYNC -command { Photon::setsync $Photon::ESYNC }

  .menubar.photon add command -label test -command {
    Photon::begingame { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 } \
    { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 }
  }

  .menubar.photon add check -label "Game Internals Debug" \
      -variable Photon::gdebug
  
  .menubar.photon add check -label "Performance" -command \
      { namespace eval Photon:: { ::Photon::pp::podperf_window $podperfon } } \
      -variable Photon::podperfon
  .menubar.photon add check -label "Radio Monitor" -command \
      { namespace eval Photon:: { ::Photon::radio_window $radiomon } } \
      -variable Photon::radiomon
  .menubar.photon add check -label "Answerback Mode" \
      -variable Photon::answerback_debug


  for { set i 0 } { $i <= 0xff } { incr i } {
      set slot_op($i) sp_null
  }
}

proc radio_window { i } {
  if { [ winfo exists .radio ] } {
    if { ! $i } {
      destroy .radiomon
      return -code ok
    } else {
      return -code ok
    }
  }
  
  set r [ frame .radio ]
  
  set row 0
  set col 0
  
  proc rx_row { slots } {
    upvar row row
    upvar col col
    upvar r r
    set col 0
    foreach a $slots {
      label ${r}.${a} -textvariable ::Photon::cr_state::radiodata_rx_x($a) \
          -width 3
      grid ${r}.${a} -row $row -column [incr col] -sticky e
    }
    incr row
  }

  proc tx_row { slots } {
    upvar row row
    upvar col col
    upvar r r
    set col 0
    foreach a $slots {
      label ${r}.${a} -textvariable ::Photon::cr_state::radiodata_tx_x($a) \
          -width 3
      grid ${r}.${a} -row $row -column [incr col] -sticky e
    }
    incr row
  }
    
  tx_row {0}
  rx_row {3 4}
  rx_row {5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24}
  tx_row {25 26 27 28 29}
  rx_row {31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50}
  tx_row {55 56 57 58 59}
  
  wm manage .radio
}

proc setsync { sync } {
  variable currentsync
  variable currentsyncbin
  variable PSYNC
  variable ESYNC
  variable GSYNC
  variable debug

  if { $sync == $PSYNC } {
    cr::setsync PSYNC
    set currentsync "PSYNC"
    set currentsyncbin $PSYNC
  } elseif { $sync == $GSYNC } {
    cr::setsync GSYNC
    set currentsync "GSYNC"
    set currentsyncbin $GSYNC
  } elseif { $sync == $ESYNC } {
    cr::setsync ESYNC
    set currentsync "ESYNC"
    set currentsyncbin $ESYNC
  }   
  if { $debug == 1 } {
    ::debuglog "photon: Sync set to $currentsync ($currentsyncbin)"
  } 
}

proc endgame { } {
  setsync $::Photon::ESYNC

  after 3000 [ namespace code { cr::set_cr_handler idle_cr_handler } ]
  after 15000 [ namespace code { setsync $::Photon::PSYNC } ]
}

proc begingame { red_slots grn_slots } {
  variable slot_op
  variable slot_used
  variable REDIR
  variable GRNIR
  variable RBASE
  variable RBASE2
  variable GBASE
  variable GBASE2
  variable RTOWER
  variable GTOWER
  variable TARGET
  variable SMISS
  variable PRCVD
  variable ERCVD
  variable SERROR
  variable EALARM
  variable GSYNC
  variable bigdebug
  variable lastpollsn
  
  namespace eval ::Photon::cr_state {
    set cr_list { }
    set cr_lock 0     
  }
  
  set lastpollsn -1
  
  # Set up the strategies for each message received
  for { set i 0 } { $i <= 0xff } { incr i } {
    # pod ID codes
    if { ( ($i >= 0x5f) && ($i <= 0x7f) ) ||
         ( ($i >= 0x01) && ($i <= 0x23) ) ||
         ( $i == 0x5d ) } {
      set slot_op($i) op_idcode
    # actual pod codes
    } elseif { ( ( $i >= $REDIR ) && ( $i < ( $REDIR + 20 )) ) ||
               ( ($i >= ( $GRNIR + 1 )) && ( $i < ( $GRNIR + 20 )) ) ||
               ( $i == 0x94 ) } {   
      set slot_op($i) op_podcode
    # targets...
    } elseif { ( $i == $RBASE ) ||
               ( $i == $RBASE2 ) ||
               ( $i == $GBASE ) ||
               ( $i == $GBASE2 ) ||
               ( $i == $RTOWER ) ||
               ( $i == $GTOWER ) ||
               ( $i == $TARGET ) } {
      set slot_op($i) op_targetcode
    # diagnostics
    } elseif { $i == $SMISS } {
      set slot_op($i) op_syncmiss
    } elseif { $i == $PRCVD } {
      set slot_op($i) op_psyncrcvd
    } elseif { $i == $ERCVD } {
      set slot_op($i) op_esyncrcvd
    } elseif { $i == $SERROR } {
      set slot_op($i) op_syncerror
    } elseif { $i == $EALARM } {
      set slot_op($i) op_ealarm
    } elseif { ( $i > 0xa0 ) && ( $i <= 0xaf ) } {
      set slot_op($i) op_ack
    } else {
      set slot_op($i) op_error
    }
  }

  cr::set_cr_handler [ namespace code { game_cr_handler_wrapper } ]

  for { set i 0 } { $i < 20 } { incr i } {
    if { [ lsearch -exact $red_slots $i ] != -1 } {
      set slot_used($i) 1   
    } else {
      set slot_used($i) 0
    }
    if { [ lsearch -exact $grn_slots $i ] != -1 } {
      set slot_used([ expr { $i + 20 } ]) 1   
    } else {
      set slot_used([ expr { $i + 20 } ]) 0
    }
  }

  # initialize pod performance data
  ::Photon::pp::init
  
  # Really get the party started.
  setsync $GSYNC
}

proc debuglog { i } {
  variable debug
  if { $debug == 1 } {
      ::debuglog $i
  }
}

proc gdebuglog { i } {
  variable gdebug 
  if { $gdebug } {
      ::debuglog "photon:g:$i"
  }
}

# convert a team slot (0-19 + color) to a
# "game slot" (0-39).
proc ts_to_gs { teamslot color } {
  variable PLAYERS_PER_TEAM
  if { $color == "0" || $color == "red" } {
    set base 0
  } elseif { $color == "1" || $color == "green" } {
    set base $PLAYERS_PER_TEAM
  } else {
    return -code error "unknown color $color"
  }
  if { $teamslot < 0 || $teamslot > 19 } {
    return -code error "teamslot $teamslot out of range"
  }
  return [expr $base + $teamslot]
}

# given a radio slot, return a team and player # (indexed @0)
proc rs_to_gs { slot } {
  variable RED_RFSTART
  variable GRN_RFSTART
  variable PLAYERS_PER_TEAM
  variable rs_to_gs_table

  if { [ info exists rs_to_gs_table ] } {
    return $rs_to_gs_table($slot)
  } else {
    for { set j 0 } { $j < 0xff } { incr j } {
      if { ( $j >= $RED_RFSTART ) && 
           ( $j < ( $RED_RFSTART + $PLAYERS_PER_TEAM ) ) } {
        set rs_to_gs_table($j) [ expr { $j - $RED_RFSTART } ]
      } elseif { ( $j >= $GRN_RFSTART ) &&
                 ( $j < ( $GRN_RFSTART + $PLAYERS_PER_TEAM ) ) } {
        set rs_to_gs_table($j) [
            expr { ( $j - $GRN_RFSTART ) + $PLAYERS_PER_TEAM } ]
      } else {
        set rs_to_gs_table($j) -1
      }
    }     
    return $rs_to_gs_table($slot)
  }
}

proc ir_to_gs { irn } {
  variable REDIR
  variable GRNIR
  variable PLAYERS_PER_TEAM
  variable GRN_SLOT_0_IR
  variable ir_to_gs_table

  if { [ info exists ir_to_gs_table ] } {
      return $ir_to_gs_table($irn)
  }

  for { set i 0 } { $i <= 255 } { incr i } {
    if { $i == $GRN_SLOT_0_IR } {
      set ir $GRNIR
    } else {
      set ir $i
    }
      
    if { ( $ir >= $REDIR ) &&
         ( $ir < ( $REDIR + $PLAYERS_PER_TEAM ) ) } {
      set ir_to_gs_table($i) [ expr { $ir - $REDIR } ]
    } elseif { ( $ir >= $GRNIR ) &&
               ( $ir < ( $GRNIR + $PLAYERS_PER_TEAM ) ) } {
      set ir_to_gs_table($i) [ expr ( { $ir - $GRNIR ) + $PLAYERS_PER_TEAM } ]
    } else {
      set ir_to_gs_table($i) -1
    }
  }
  return $ir_to_gs_table($irn)
}

proc gs_to_ir { gsn } {
  variable REDIR
  variable GRNIR
  variable PLAYERS_PER_TEAM
  variable GRN_SLOT_0_IR
  variable gs_to_ir_table

  if { [ info exists gs_to_ir_table ] } {
    return $gs_to_ir_table([expr int($gsn)])
  }

  for { set i 0 } { $i < $PLAYERS_PER_TEAM } { incr i } {
    set gs_to_ir_table($i) [ expr $REDIR + $i ]
    set gs_to_ir_table([ expr $i + $PLAYERS_PER_TEAM ]) [ expr $GRNIR + $i ]
  }

  # Because Green Slot 0.
  set gs_to_ir_table($PLAYERS_PER_TEAM) [ expr int($GRN_SLOT_0_IR) ]

  return $gs_to_ir_table([ expr int($gsn)])
}


proc id_to_sig { idr } {
  variable id_to_sig_table
  if { [ info exists id_to_sig_table ] } {
    return $id_to_sig_table([ expr int($idr) ])
  }

  for { set id 0 } { $id <= 255 } { incr id } {
    if { ( $id > 0 ) && ( $id < 11 ) } {
      set id_to_sig_table($id) [ expr { $id + 0x5f } ]
    } elseif { ( $id > 10 ) && ( $id < 21 ) } {
      set id_to_sig_table($id) [ expr { ( $id - 11 ) + 0x70 } ]
    } elseif { ( $id > 20 ) && ( $id < 27 ) } {
      set id_to_sig_table($id) [ expr { ( $id - 21 ) + 0x6a } ]
    } elseif { ( $id > 26 ) && ( $id < 33 ) } {
      set id_to_sig_table($id) [ expr { ( $id - 27 ) + 0x7a } ]
    } elseif { $id == 33 } {
      set id_to_sig_table($id) [ expr { int(0x5f) } ]
    } elseif { $id == 34 } {
      set id_to_sig_table($id) [ expr { int(0x5d) } ]
    } elseif { ( $id > 34 ) && ( $id < 45 ) } {
      set id_to_sig_table($id) [ expr { ( $id - 35 ) + 0x01 } ]
    } elseif { ( $id >= 45 ) && ( $id < 65 ) } {
      set id_to_sig_table($id) [ expr { ( $id - 45 ) + 0x10 } ]
    } else {
      set id_to_sig_table($id) -1
    }
  }
  return $id_to_sig_table([ expr int($idr) ]) 
}

proc sig_to_id { sigr } { 
  variable sig_to_id_table 
  
  if { [ info exists sig_to_id_table ] } {
      return $sig_to_id_table([ expr int($sigr) ]) 
  }

  for { set i 0 } { $i <= 255 } { incr i } {
    set sig_to_id_table([id_to_sig $i]) $i
  }

  return $sig_to_id_table([ expr int($sigr) ])
}

proc gs_to_rs { gsr } { 
  variable RED_RFSTART
  variable GRN_RFSTART
  variable PLAYERS_PER_TEAM
  variable gs_to_rs_table

  if { [ info exists gs_to_rs_table ] } {
      return $gs_to_rs_table($gsr)
  } 

  for { set gs -2 } { $gs < 0xff } { incr gs } {
    if { $gs < 0 } {
      set gs_to_rs_table($gs) -1
    } elseif { $gs < $PLAYERS_PER_TEAM } {
      set gs_to_rs_table($gs) [ expr { $gs + $RED_RFSTART } ]
    } elseif { $gs < ($PLAYERS_PER_TEAM * 2) } {
      set gs_to_rs_table($gs) \
          [ expr { $gs + ( $GRN_RFSTART - $PLAYERS_PER_TEAM ) } ]
    } else {
      set gs_to_rs_table($gs) -1
    }
  }

  return $gs_to_rs_table($gsr)
}

       
proc op_idcode { slot op data } {
  variable answerback_debug
  
  if { $op == "rx" } {
    set gs [ rs_to_gs $slot ]

    if { $gs < 0 } {
      return -code ok
    }
    
    if { [pp::ObserveOrDiscoverId $slot $data] && $answerback_debug } {
      putdown [ gs_to_ir [ rs_to_gs $slot ] ]
    }

    namespace eval ::Game NullHandler [ rs_to_gs $slot ]
  }
}


proc op_podcode { slot op data } {
  variable slot_used
  variable data_gs [ ir_to_gs $data ]
  
  if { $op == "rx" } {    
    pp::ObservePodCodeRx $slot $data $slot_used($data_gs)
    if { ! $slot_used($data_gs) } {
      gdebuglog "op_podcode: data for unused slot $slot $data"
    }
    
    # everything is peachy, we now pass
    # it off to the game manager
    set gs [ rs_to_gs $slot ]

    if { $gs >= 0 } {      
      gdebuglog "HitHandler $gs $data"
      if { $slot_used($gs) == 1 } {
        namespace eval ::Game HitHandler $gs $data
      }
    }
  } elseif { $op == "tx" } {
    pp::ObservePodCodeTx $slot $data
  }     
  return -code ok
}
      
proc op_targetcode { slot op data } {  
  if { $op == "rx" } {
    set gs [ rs_to_gs $slot ]
    if { $gs >= 0 } {
      if { [pp::ObserveTargetRx $slot $data] } {
        gdebuglog "TargetHandler: $gs $data"
        namespace eval ::Game TargetHandler $gs $data
      }
    }
  }
  return -code ok
}

proc op_syncmiss { slot op data } { 
  if { $op == "rx" } {
    pp::ObserveSyncMissed $slot
    namespace eval ::Game NullHandler [ rs_to_gs $slot ]
  }
}

proc op_psyncrcvd { slot op data } {  
  variable PSYNC
  variable currentsyncbin

  if { $op == "rx" } {
    if { $currentsyncbin != $PSYNC } {
      pp::ObservePsyncReceived $slot 0
    } else {
      pp::ObservePsyncReceived $slot 1
    }
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc op_esyncrcvd { slot op data } {

  variable ESYNC
  variable currentsyncbin

  if { $op == "rx" } {
    if { $currentsyncbin != $ESYNC } {
      pp::ObserveEsyncReceived $slot 0
    } else {
      pp::ObserveEsyncReceived $slot 1
    }
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc op_syncerror { slot op data } { 
  if { $op == "rx" }  {
    pp::ObserveSyncError $slot
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc op_ealarm { slot op data } { 
  if { $op == "rx" }  {
    pp::ObserveEAlarm $slot
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc op_ack { slot op data } {
  if { $op == "rx" } {
    pp::ObserveHitAck $slot $data
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc op_error { slot op data } {
  if { $op == "rx" } {
    pp::ObserveDataReceived $slot
    pp::ObserveInvalidRx $slot
    if {[rs_to_gs $slot] >= 0} {
      namespace eval ::Game NullHandler [ rs_to_gs $slot ]
    }
  }
}

proc sp_null { slot op data } {
  return -code ok
}

namespace export rs_to_gs
namespace export ir_to_gs
namespace export gs_to_rs
namespace export sig_to_id

}
#namespace
