
namespace eval ::Photon::cr {

variable cr_pending { }
variable cr_sock ""
variable cr_handler_callback ""

proc set_cr_handler { handler } {
  variable cr_handler_callback
  set cr_handler_callback $handler
}

# Called when new data has arrived on the radio socket. Catches errors
# and will try to reconnect if there's a problem.
proc newdata { sock } {
  if { [ eof $sock ] } {
    ::warninglog "cr::newdata eof while reading from $sock"
    close $sock
    reconnect
    return -code ok
  }
  if {[catch {readdata $sock} error]} {
    ::warninglog "readdata failed $error"
  }
  return -code ok
}

# Sends a SETSYNC command to the radio.
proc setsync { sync } {
  variable cr_sock
  putstring "SETSYNC $sync"
}

# Returns any waiting data from cr_pending.
proc read { } {
  variable cr_sock
  variable cr_pending
  set cr_returned $cr_pending
  set cr_pending { }
  return $cr_returned
}

# Sends a WRITE command to the radio.
proc write { byte } {
  variable cr_sock
  putstring "WRITE $byte"
}

# Sends the the string "data" to the radio device.
proc putstring { data } {
  variable cr_sock
  sputs $cr_sock $data
  sflush $cr_sock
}

# "enables" or "disables" the radio.
proc enable { on } {
  variable cr_sock

  set mode "OFF"
  if { "$on" == "1" } {
    set mode "ON"
  }
  sputs $cr_sock "ENABLE $mode"
  sputs $cr_sock "READ $mode"
  sflush $cr_sock
}

# Reads any pending messages from the radio.
proc readdata { sock } {
  variable cr_sock
  variable cr_pending
  variable cr_handler_callback
  
  if { [ eof $cr_sock ] } {
    return -code ok
  }

  if { [ gets $sock line ] < 0 } {
  } else {
    set line [ string trim $line "\r\n" ]
    set e [ split $line {} ]
    set code [ join [ lrange $e 0 2 ] "" ]
    set message [ join [ lrange $e 4 end ] "" ]
    set stuff [ split $message " " ]

    if { $code == 905 } {
      lappend cr_pending "$message"
    } elseif { $code == 999 } {
      ::warninglog "$message"
    }
  }
  
  if { [ catch {$cr_handler_callback} dummy error ] } {
    ::warninglog "cr_handler failed $error"
  }

  return -code ok
}

proc sputs { sock message } {
  if { [ catch {puts $sock $message} error ] } {
    ::warninglog "write error to socket $sock ($error)"
  }
}

proc sflush { sock } {  
  if { [ catch {flush $sock} error ] } {
    ::warninglog "flush error to socket $sock ($error)"
  }
}   

proc init { read_callback } {
  variable cr_sock
  variable cr_handler_callback
  set cr_handler_callback $read_callback
  reconnect
}

proc reconnect { } {
  variable cr_sock

  if {[info exists ::Conf::cr_tty]} {
    ::warninglog "Opening radio at $::Conf::cr_tty"
    set rc [ catch "open $::Conf::cr_tty RDWR" s ]
  } else {
    ::warninglog \
        "Opening radio at $::Conf::cr_server_name $::Conf::cr_listenport"
    set rc [ catch "socket $::Conf::cr_server_name $::Conf::cr_listenport" s ]
  }

  if { $rc != 0 } {
    ::warninglog "Failed to open CR connection... sleeping"
    ::warninglog $s
    after 1000 cr_reconnect
    return -code ok
  }

  fconfigure $s -buffering line
  fconfigure $s -blocking 0
  fconfigure $s -mode 115200,n,8,1
  fconfigure $s -translation binary
  fconfigure $s -eofchar {}

  
  if { $rc != 0 } {
    ::warninglog "error initializing cr $stuff"
  }

  fileevent $s readable [namespace code "newdata $s"]

  set cr_sock $s
}

}
