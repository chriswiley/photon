set streaming_sockets { }
set valid_subs { GAME STATUS RADIO }
set array_watchlist { }
set scalar_watchlist { }

proc Accept { newSock addr port } {
  variable outbuffer_$newSock { }
  variable writeable_$newSock 1
  variable subscriptions_$newSock

  ::debuglog "display connection accepted from [SockInfo $newSock]"

  fconfigure $newSock -blocking 0
  fconfigure $newSock -buffering line

  fileevent $newSock readable [ list namespace eval ::Display \
      [ list ServerRead $newSock ] ]

  set writable_$newSock 1
  set subscriptions_$newSock { }

  trace variable outbuffer_$newSock w ServerStreamWriteBuffer
}


proc ServerInit { } {
  # go through and put traces on the stuff we're interested in...
  foreach x { STATE GT_time } {
    namespace eval :: [ list trace variable $x w ::Display::ServerTrace ]
  }
}

proc ServerPregameInit { } {
  # clear traces that are currently in our watchlist
  variable array_watchlist
  variable scalar_watchlist

  foreach x $array_watchlist {
    namespace eval ::Game [ list trace vdelete $x w ::Display::ServerTrace ]
  }
  foreach x $scalar_watchlist {
    namespace eval ::Game [ list trace vdelete $x w ::Display::ServerTrace ]
  }
  foreach x $::Photon::cr_state::radio_watchlist {
    namespace eval ::cr \
        [ list trace vdelete $x w ::Display::ServerTrace ]
  }

  set array_watchlist $::Game::array_display_watchlist
  set scalar_watchlist $::Game::scalar_display_watchlist

  foreach x $array_watchlist {
    namespace eval ::Game [ list trace variable $x w ::Display::ServerTrace ]
  }
  foreach x $scalar_watchlist {
    namespace eval ::Game [ list trace variable $x w ::Display::ServerTrace ]
  }
  foreach x $::Photon::cr_state::radio_watchlist {
    namespace eval ::Photon::cr_state \
        [ list trace variable $x w ::Display::ServerTrace ]
  }
}


proc Action { string } {
  ServerStreamWrite GAME "904-$string"
}


proc ServerTrace { name name2 op } {
  set status_traces { STATE GT_time }  
  if { [ lsearch $status_traces $name ] != -1 } {
    if { $::STATE != "TRANSITION" } {
      ::Display::ServerStreamWrite STATUS \
          "901-$::STATE $::GT_time $Ginfo::gameid"
    }
    return -code ok
  }
  set myvar [ namespace tail $name ]

  if { [ lsearch $::Display::array_watchlist $myvar ] != -1 } {
    upvar 0 ::Game::$myvar stuff
    ::Display::ServerStreamWrite GAME "902-$myvar $name2 $stuff($name2)"
  } elseif { [ lsearch $::Display::scalar_watchlist $myvar ] != -1 } {
    upvar 0 ::Game::$myvar stuff
    ::Display::ServerStreamWrite GAME "903-$myvar $stuff"
  } elseif { [ lsearch $::Photon::cr_state::radio_watchlist $myvar ] != -1 } {
    upvar 0 ::Photon::cr_state::$myvar stuff
    ::Display::ServerStreamWrite RADIO "902-$myvar $name2 $stuff($name2)"
  } 
  return -code ok
}

proc ServerStreamWrite { type string } {
  variable streaming_sockets
  
  foreach x $streaming_sockets {
    variable subscriptions_$x
    upvar 0 subscriptions_$x subs
    if { [ info exists subs ] } {
      if { [ lsearch $subs $type ] != -1 } {
        variable outbuffer_$x     
        lappend outbuffer_$x $string
      }
    }
  }
}

proc ServerStreamWriteBuffer { name element op } {

  # suck the socketname out of name
  set sock [ lindex [ split $name "_" ] 1 ]
  variable outbuffer_$sock
  upvar 0 outbuffer_$sock buffer

  # write out contents of buffer  
  foreach x $buffer {
    sputs $sock $x
    set buffer [ lreplace $buffer 0 0 ]
  }
  sflush $sock
  return -code ok
}

proc CloseSock { sock } {
  variable streaming_sockets
  if { [ lsearch $streaming_sockets $sock ] != -1 } {
    set j [ lsearch $streaming_sockets $sock ]
    set streaming_sockets [ lreplace $streaming_sockets $j $j ]
  }
  ::debuglog "display connection closed from [SockInfo $sock]"
  catch { close $sock }
  return -code ok
}

proc ServerRead { sock } {

  variable streaming_sockets

  if [ eof $sock ] {
    CloseSock $sock
    return -code ok
  }

  set rc 0
  set line ""

  catch { set rc [ gets $sock line ] } {
    return -code ok
  }

  if { $rc >= 0 } {
    # valid commands
    # STATUS (gives status info)
    # MODE <stream|poll> (switches port modes)
    # UPDATE (sends current score info (all) )

    set j [ split $line " " ]
    set b 0
    set command [ lindex $j 0 ]
    set commands { STATUS MODE UPDATE SUB UNSUB }

    foreach x $commands {
      if { $x == $command } {
        ServerHandler_$command $sock $j
        sflush $sock
        set b 1
        break
      }
    }

    if { $x != $command } {
        sputs $sock "503 Unknown Command"
        sflush $sock
    }
  }
}

proc ServerHandler_STATUS { sock line } {
  while { $::STATE == "TRANSITION" } {
    vwait ::STATE
  }

  if { ( $::STATE == "PREGAME" ) 
        || ( $::STATE == "GAME" ) 
        || ( $::STATE == "POSTGAME" ) } {
    sputs $sock "100-STATE: $::STATE"
    sputs $sock "100-GAME: $::Ginfo::gameid"
    sputs $sock "100 TIME: $::GT_time"
  } else {
    sputs $sock "100 IDLE"
  }
  sflush $sock
  return -code ok
}

proc ServerHandler_UPDATE { sock line } {
  while { $::STATE == "TRANSITION" } {
    vwait ::STATE
  }

  # if we're in the postgame or idle, we'll return the previous
  # game's scores (are still in memory)

  ServerDumpGameInfo $sock

  sflush $sock
  return -code ok
}

proc ServerDumpGameInfo { sock } {

  variable array_watchlist
  variable scalar_watchlist

  foreach myvar $array_watchlist {
    upvar 0 ::Game::$myvar stuff
    foreach index [ array names stuff ] {
      sputs $sock "902-$myvar $index $stuff($index)"
    }
  }

  foreach myvar $scalar_watchlist {
    upvar 0 ::Game::$myvar stuff
    sputs $sock "903-$myvar $stuff"
  }

  foreach myvar $::Photon::cr_state::radio_watchlist {
    upvar 0 ::Photon::cr_state::$myvar stuff
    foreach index [ array names stuff ] {
      sputs $sock "902-$myvar $index $stuff($index)"
    }
  }
    
  return -code ok
}

proc ServerHandler_MODE { sock line } {
  set mode [ lindex $line 1 ]

  variable streaming_sockets

  if { $mode == "POLL" } { 
    if { [ lsearch -exact $streaming_sockets $sock ] != -1 } {
      set streaming_sockets [ lreplace $streaming_sockets \
          [ lsearch -exact $streaming_sockets $sock ] \
          [ lsearch -exact $streaming_sockets $sock ] ]
      set count [ llength $streaming_sockets ]
      sputs $sock "100 OK ($count streaming)"
      sflush $sock
    } else {
        sputs $sock "101 NOT STREAMING"
        sflush $sock
    }
  } elseif { $mode == "STREAM" } {
    if { [ lsearch -exact $streaming_sockets $sock ] != -1 } {
      sputs $sock "101 ALREADY STREAMING"
      sflush $sock
    } else {
      lappend streaming_sockets $sock
      set count [ llength $streaming_sockets ]
      sputs $sock "100 OK ($count streaming)"
      sflush $sock
    }
  } else {
    sputs $sock "502 ONLY ACCEPTS POLL OR STREAM"
    sflush $sock
  }
}

proc ServerHandler_SUB { sock line } {

  set what [ lindex $line 1 ]
  variable subscriptions_$sock    
  variable valid_subs

  set mode [ lindex $line 1 ]

  if { ! [ info exists subscriptions_$sock ] } {
    set subscriptions_$sock { }
  }

  upvar 0 subscriptions_$sock bob

  if { [ lsearch -exact $valid_subs $mode ] != -1 } {
    if { [ lsearch -exact $bob $mode ] == -1 } {
      lappend bob $mode
      sputs $sock "101 SUBSCRIBED TO $bob"
      sflush $sock
    } else {
      sputs $sock "101 ALREADY SUBSCRIBED TO $bob"
      sflush $sock
    }
  } else {
    sputs $sock "502 ONLY ACCEPTS STATUS, GAME OR RADIO"
    sflush $sock
  }
}

proc ServerHandler_UNSUB { sock line } {
  set what [ lindex $line 1 ]
  variable subscriptions_$sock    
  variable valid_subs

  set mode [ lindex $line 1 ]

  if { ! [ info exists subscriptions_$sock ] } {
    set subscriptions_$sock { }
  }

  upvar 0 subscriptions_$sock bob

  if { [ lsearch -exact $valid_subs $mode ] != -1 } {
    if { [ lsearch -exact $bob $mode ] != -1 } {
      set bob [ lreplace $bob [ lsearch -exact $bob $mode ] \
          [ lsearch -exact $bob $mode ] ]
      sputs $sock "101 UNSUBSCRIBED TO $mode"
      sflush $sock
    } else {
      sputs $sock "101 NOT SUBSCRIBED TO $mode"
      sflush $sock
    }
  } else {
    sputs $sock "502 ONLY ACCEPTS STATUS OR GAME"
    sflush $sock
  }
}

# This just creates an empty namespace where the variables from the server
# will be mirrored.
namespace eval Server {

}

proc ClientRead { sock } {
  
  if { [ eof $sock ] } {
    return -code ok
  }

  if { [ gets $sock line ]  < 0 } {

  } else {

    set e [ split $line {} ]
    set code [ join [ lrange $e 0 2 ] "" ]
    set message [ join [ lrange $e 4 end ] "" ]
    set stuff [ split $message " " ]

    if { "$code" == "100" } {
      if { [ lindex $stuff 0 ] == "STATE:" } {
        set ::Display::Server::STATE [ lindex $stuff 1 ]
      } elseif { [ lindex $stuff 0 ] == "GAME:" } {
        set ::Display::Server::gameid [ lindex $stuff 1 ]
      } elseif { [ lindex $stuff 0 ] == "TIME:" } {
        set ::Display::Server::GT_time [ lindex $stuff 1 ]
      } elseif { [ lindex $stuff 0 ] == "IDLE" } {
        set ::Display::Server::STATE IDLE
      }
      return -code ok
    }
  
    if { $code < 900 } {
        return "$code $message"
    }
  
    if { $code == 901 } {     
      set stuff [ split $message " " ]      
      set ::Display::Server::STATE [ lindex $stuff 0 ]
      set ::Display::Server::GT_time [ lindex $stuff 1 ]
      set ::Display::Server::gameid [ lindex $stuff 2 ]     
    }

    if { $code == 902 } {     
      set stuff [ split $message " " ]
      set varname [ lindex $stuff 0 ]
      set varindex [ lindex $stuff 1 ]
      set varvalue [ lindex $stuff 2 ]      
      upvar 0 ::Display::Server::$varname myvar
      set myvar($varindex) $varvalue      
    } 
  
    if { $code == 903 } {
      set stuff [ split $message " " ]
      set varname [ lindex $stuff 0 ] 
      set varindex [ lindex $stuff 1 ]
      set varvalue [ lindex $stuff 2 ]      
      upvar 0 ::Display::Server::$varname myvar
      set myvar $varvalue       
    }
  
    if { $code == 904 } { 
      lappend ::Display::Server::play_by_play $stuff      
    } 
  }
}

proc sputs { sock message } {
  if { [ catch [ list puts $sock $message ] stuff ] } {
    ::warninglog "write error to socket $sock ($stuff)"
    CloseSock $sock
    return -code ok
  } 
}

proc sflush { sock } {
  if { [ catch { flush $sock } stuff ] } {
    ::warninglog "flush error to socket $sock ($stuff)"
    CloseSock $sock
    return -code ok
  }
}

