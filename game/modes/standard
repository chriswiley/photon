
#
# $Log: public,v $
# Revision 1.9  2000/11/28 20:01:00  reason
# Put hit own player count in your own slot
#
# Revision 1.8  1999/01/31 17:14:58  banz
# BETA RELEASE
#
# Revision 1.7  1998/12/13 03:24:54  banz
# Add "counters" for hitplayer matrix
#
# Revision 1.6  1998/12/03 19:51:07  banz
# Change ::Action calls to global action, instead of one in Display namespace
#
# Revision 1.5  1998/11/29 21:49:27  banz
# export paramslist for editing functions
#
# Revision 1.4  1998/11/15 23:30:56  banz
# "Usedlist" wasn't getting cleared out
#
# Revision 1.3  1998/11/15 21:43:33  banz
# Add TEAM SCORE support
#
# Revision 1.2  1998/11/08 22:15:14  banz
# fixed RCS identifiers
#
# Revision 1.1  1998/11/08 22:09:25  banz
# Initial revision
#
#

set rcsid  { $Id: public,v 1.8 1999/01/31 17:14:58 banz Exp game $ }

proc HitHandler { gs data } {
  
  set tgtgs [ ::Photon::ir_to_gs $data ]

  variable score
  variable h1gethitcount    

  # if they're equal, we hit our own player
  if { $tgtgs == $gs } {
    if { ( $Params::etmode == 1 ) || ( $Params::etmode ==2 ) } {
      if { $Params::hitownplayer_godown } {     
        ::Photon::putdown $data 
      }
      set score($gs) [ expr $score($gs) + $Params::hitownplayer ]
      ::Action "%$gs% hit own player"
      incr ::Ginfo::hitarray($gs,$gs)
      UpdateTeamScores
    } else {
      debuglog 2 "possible bad code, own player in freeforall ( $gs )"
    }
    return -code ok
  }

  # an outer bounds check
  if { ( $gs < 0 ) || ( $gs >= 40 ) } {
    debuglog 2 "gs ($gs) out of range"
    return -code ok
  }
  
  if { ( $tgtgs < 0 ) || ( $tgtgs >= 40 ) } {
    debuglog 2 "tgtgs ($tgtgs) out of range"
  }


  #see if it's a same team, or other team hit...
  if { ( ( $gs < 20 ) && ( $tgtgs >= 20 ) ) ||
       ( ( $gs >= 20 ) && ( $tgtgs < 20 ) ) } {
    upvar 0 Params::otherteam_hit hitscore
    upvar 0 Params::otherteam_gethit gethitscore
    upvar 0 Params::otherteam_godown godown
  } else {
    if { $Params::etmode != 3 } {
      debuglog 2 "possible bad code: same team received in pub or league ($gs, $tgtgs)"
    }
    if { $Params::can_hit_own_team == 0 } {
      return -code ok
    }
    upvar 0 Params::ourteam_hit hitscore
    upvar 0 Params::ourteam_gethit gethitscore
    upvar 0 Params::ourteam_godown godown
  }

  if { $godown == 1 } {
    ::Photon::putdown $data
  }

#    debuglog 2 "slot $gs hit slot $tgtgs"

  set score($gs) [ expr { $score($gs) + $hitscore } ]

  if { $Params::handicap == 0 } {
    # standard, just down'em
    set score($tgtgs) [ expr { $score($tgtgs) + $gethitscore } ]      
  } elseif { $Params::handicap == 1 } { 
    # standard photon handicapping
    if { $score($tgtgs) >= $Params::beginscore } {
      set score($tgtgs) [ expr { $score($tgtgs) + $gethitscore } ]
      set h1gethitcount($tgtgs) 0
    } else {
      set diff [ expr { int(( $Params::beginscore - $score($tgtgs) ) / $Params::handicap1_modifier ) } ]
      incr h1gethitcount($tgtgs)
    
      if { $h1gethitcount($tgtgs) > $diff } {
        set score($tgtgs) [ expr { $score($tgtgs) + $gethitscore } ]
        set h1gethitcount($tgtgs) 0
      }
    }
  }
  
  ::Action "%$gs% hit %$tgtgs%"
  
  incr ::Ginfo::hitarray($gs,$tgtgs)
  
  UpdateTeamScores
  
  return -code ok

}

proc NullHandler { gs } {    

}

proc TargetHandler { gs data } {

  variable score
  variable targetcount
  variable towercount
  variable basecount

  if { $Params::etmode != 3 } {
    if { ( $gs < 40 ) && ($gs >= 20 ) } {
      set base1 $Photon::RBASE
      set base2 $Photon::RBASE2
      set tower $Photon::RTOWER
    } elseif { ( $gs >= 0 ) && ($gs < 20) } {
      set base1 $Photon::GBASE
      set base2 $Photon::GBASE2
      set tower $Photon::GTOWER
    }

    # do this so we "ignore" possible bad codes!
    if { $Params::targetscore != 0 } {
      if { $data == $Photon::TARGET } { 
#   debuglog 2 "slot $gs hit the target"  
        incr targetcount($gs)
        set score($gs) [ expr { $score($gs) + $Params::targetscore } ]  
        UpdateTeamScores
        ::Action "%$gs% hit the Target"
        return -code ok
      }
    }
  
    if { $Params::basescore != 0 } {
      if { $data == $base1 } {
#   debuglog 2 "slot $gs hit base"
        incr basecount($gs)
        if { $basecount($gs) == 1 } {
          set score($gs) [ expr { $score($gs) + $Params::basescore } ]
          UpdateTeamScores
          ::Action "%$gs% hit the Base"
        }
      }
    }
  
    if { $Params::base2score != 0 } {  
      if { $data == $base2 } {
#   debuglog 2 "slot $gs hit baseII"
        incr basecount($gs)
        if { $basecount($gs) == 1 } {
          set score($gs) [ expr { $score($gs) + $Params::base2score } ]
          ::Action "%$gs% hit the Secondary Base"
          UpdateTeamScores
        }
      }
    }

    if { $Params::towerscore != 0 } {
      if { $data == $tower } {
#   debuglog 2 "slot $gs hit the tower"
        incr towercount($gs)
        set score($gs) [ expr { $score($gs) + $Params::towerscore } ]
        UpdateTeamScores
        ::Action "%$gs% hit the Tower"
      }     
    }
  }
}

proc Init { type } {

  variable modename
  variable array_display_watchlist
  variable scalar_display_watchlist
  variable setparams
  variable paramslist
  variable player_savelist
  set modename $type

  set paramslist { beginscore handicap targetscore base2score basescore etmode teams maxperteam towerscore length otherteam_hit otherteam_gethit otherteam_godown ourteam_hit ourteam_gethit ourteam_godown hitownplayer hitownplayer_godown can_hit_own_team handicap1_modifier autoghost }
  
  namespace eval Params {
    if { $::Game::modename == "public" } {
      set beginscore 1000
      set handicap      1
      set etmode        1
      set otherteam_hit 10
      set otherteam_gethit -10
      set otherteam_godown 1
      set ourteam_hit 0
      set ourteam_gethit 0  
      set ourteam_godown 0
      set hitownplayer -30
      set hitownplayer_godown 1
      set can_hit_own_team 0
      set autoghost 1     
    } elseif { $::Game::modename == "league" } {
      set beginscore    0
      set handicap      0
      set etmode        2
      set otherteam_hit 10
      set otherteam_gethit -10
      set otherteam_godown 1
      set ourteam_hit 0
      set ourteam_gethit 0
      set ourteam_godown 0
      set hitownplayer -30
      set hitownplayer_godown 1
      set can_hit_own_team 0
      set autoghost 0
    } elseif { $::Game::modename == "freeforall" } {
      set beginscore 1000
      set handicap      1
      set etmode        3
      set otherteam_hit 10
      set otherteam_gethit -10
      set otherteam_godown 1
      set ourteam_hit 10
      set ourteam_gethit -10
      set ourteam_godown 1
      set hitownplayer 0
      set hitownplayer_godown 0
      set can_hit_own_team 1
      set autoghost 0
    }

    set targetscore   0
    set base2score    0
    set basescore   200
    set teams         2
    set maxperteam   20
    set towerscore    0
    set length  360
    set handicap1_modifier 100

    eval "$::Game::setparams"
  }
  set array_display_watchlist { score basecount targetcount towercount teamscore }
  set scalar_display_watchlist { }
  set player_savelist { basecount targetcount towercount }
}

proc UpdateTeamScores { } {
  variable teamscore
  variable usedlist
  variable score
  variable ghosts

  foreach x { red green } {
    set i 0
    foreach y $usedlist($x) {
      set i [ expr { $i + $score($y) } ]
    }
    if { $teamscore($x) != $i } {
      set teamscore($x) $i
    }
    if { $Params::autoghost } {
      set teamscore($x) [ expr { $teamscore($x) + $Params::beginscore * $ghosts($x) } ]
    }
  }
}

proc Begin { red_used grn_used } {  
  variable score
  variable basecount
  variable targetcount
  variable towercount
  variable h1gethitcount
  variable teamscore
  variable usedlist
  variable ghosts

  # init all counts to 0

  set redteamname "RED TEAM"
  set greenteamname "GREEN TEAM"

  set teamscore(red) 0
  set teamscore(green) 0

  set usedlist(red) { }
  set usedlist(green) { }

  foreach x $red_used {
    set b $x
    lappend usedlist(red) $b
    set score($b) $Params::beginscore
    set basecount($b) 0
    set targetcount($b) 0
    set towercount($b) 0
    set h1gethitcount($b) 0
  }

  foreach x $grn_used {
    set b [ expr { $x + 20 } ]
    lappend usedlist(green) $b
    set score($b) $Params::beginscore
    set basecount($b) 0
    set targetcount($b) 0
    set towercount($b) 0
    set h1gethitcount($b) 0
  }

  if { [ llength $usedlist(green) ] > [ llength $usedlist(red) ] } {
    set ghosts(red) [ expr [ llength $usedlist(green) ] - [ llength $usedlist(red) ] ]
    set ghosts(green) 0
  } elseif { [ llength $usedlist(green) ] < [ llength $usedlist(red) ] } {
    set ghosts(green) [ expr [ llength $usedlist(red) ] - [ llength $usedlist(green) ] ]
    set ghosts(red) 0
  } else {
    set ghosts(red) 0
    set ghosts(green) 0
  }
  UpdateTeamScores
}

