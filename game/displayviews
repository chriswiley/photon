
# $Log: displayviews,v $
# Revision 1.4  1999/01/31 17:11:44  banz
# BETA RELEASE
#
# Revision 1.3  1998/12/15 05:18:45  banz
# updated for new current game display code
#
# Revision 1.2  1998/12/13 04:28:19  banz
# little buglets with base chicklets
#
# Revision 1.1  1998/12/13 04:15:11  banz
# Initial revision
#

set rcsid { $Id: displayviews,v 1.4 1999/01/31 17:11:44 banz Exp $ }

proc game_display_setup { p { static 0 } } {
  
  variable viewable_width
  variable viewable_height
  variable count_red
  variable count_green
  variable sort_red
  variable sort_green
  variable score_root

#    frame $p -width $viewable_width -height $viewable_height
    
#    frame $p.score -width [ winfo reqwidth $p ]
  
  frame $p.score.red -width [ expr { [ winfo reqwidth $p ] / 2 } * .95 ]
  frame $p.score.green -width [ expr { [ winfo reqwidth $p ] / 2 } * .95 ]
  
  label $p.score.red.teamname -text $::Ginfo::team_red
  label $p.score.green.teamname -text $::Ginfo::team_green

  place $p.score.red.teamname -relx 0.0 -rely 0.0 -relwidth 1.0 -height [ winfo reqheight $p.score.red.teamname ] -anchor nw
  place $p.score.green.teamname -relx 0.0 -rely 0.0 -relwidth 1.0 -height [ winfo reqheight $p.score.green.teamname ] -anchor nw
  
  
  set count_green 0
  set count_red 0

  for { set i 0; set j 20 } { $i < 20 } { incr i; incr j } {
    # red team players
    if { [ info exists ::Ginfo::used($i) ] && $::Ginfo::used($i) } {
      set sort_red($count_red) $i
      incr count_red
    }

    if { [ info exists ::Ginfo::used($j) ] && $::Ginfo::used($j) } {
      set sort_green($count_green) $j
      incr count_green
    }

  }

  SortScores

  # slap their information onto the "big board"

  set j 0
  
  set maxheight 0
  set oneplayer 0

  foreach x { red green } {
    upvar 0 count_$x count

    set sibling teamname
    set sizecount [ winfo reqheight $p.score.$x.teamname ]

    for { set i 0 } { $i < $count } { incr i } {
      
      frame $p.score.$x.pl$i -width [ winfo reqwidth $p.score.$x ]

      label $p.score.$x.pl$i.base -bitmap @$Conf::gamepath/images/basechicklet.xbm -pady 0 -padx 0 -borderwidth 0
      label $p.score.$x.pl$i.name -textvariable name_${x}($i) -justify left -pady 0 -padx 0 -borderwidth 0
      label $p.score.$x.pl$i.score -textvariable score_${x}($i) -justify right -pady 0 -pady 0 -borderwidth 0

      $p.score.$x.pl$i configure -height [ winfo reqheight $p.score.$x.pl$i.name ]

      place $p.score.$x.pl$i -in $p.score.$x.$sibling -relx 0.0 -rely 1.0  -anchor nw -bordermode outside -width [ winfo reqwidth $p.score.$x.pl$i ] -height [ winfo reqheight $p.score.$x.pl$i.name ]

#     place $p.score.$x.pl$i.base -in $p.score.$x.pl$i -relx 0.025 -rely 0.0 -relheight 1.0 -anchor nw      


      place $p.score.$x.pl$i.name -in $p.score.$x.pl$i -relx 0.100 -rely 0.0 -relheight 1.0 -anchor nw -bordermode outside
      place $p.score.$x.pl$i.base -in $p.score.$x.pl$i.name -x -5 -rely 0.0 -relheight 1.0 -width [ winfo reqheight $p.score.$x.pl$i.base ] -anchor ne -bordermode outside

      place $p.score.$x.pl$i.score -in $p.score.$x.pl$i -relx .975 -rely 0.0 -relheight 1.0 -anchor ne

      set sibling pl$i
      
      set sizecount [ expr { $sizecount + 1.0 * [ winfo reqheight $p.score.$x.pl$i ] } ]

      if { $oneplayer == 0 } {    
        set oneplayer [ winfo reqheight $p.score.$x.pl$i ]    
        set maxheight [ expr { $oneplayer * 8 } ]
      }
    }

    incr j

    # add a team score

    frame $p.score.$x.teamscore -width [ winfo reqwidth $p.score.$x ]
    label $p.score.$x.teamscore.score -textvariable ::Display::Server::teamscore($x) -justify right
    $p.score.$x.teamscore configure -height [ winfo reqheight $p.score.$x.teamscore.score ]
  
    place $p.score.$x.teamscore -in $p.score.$x -relx 1.0 -rely 1.0 -anchor se -bordermode outside -width [ winfo reqwidth $p.score.$x.teamscore ] -height [ winfo reqheight $p.score.$x.teamscore.score ]
  
    place $p.score.$x.teamscore.score -in $p.score.$x.teamscore -relx .975 -rely 0.0 -relheight 1.0 -anchor ne

    set sizecount [ expr { $sizecount + ( [ winfo reqheight $p.score.$x.teamscore ] * 2 ) } ]
  
    if { $sizecount > $maxheight } { 
        set maxheight $sizecount
    }
  }
  
  $p.score configure -height $maxheight

  place $p.score.red -relx 0.0 -rely 0.0 -anchor nw -height $maxheight
  place $p.score.green -relx 1.0 -rely 0.0 -anchor ne -height $maxheight
}

proc SortScores { } {
  variable sort_red
  variable sort_green
  variable count_red
  variable count_green

  # first, update the indexes, then update the
  # codename, base, etc variables

  foreach x { red green } {
    upvar 0 sort_$x index
    upvar 0 count_$x count
    upvar 0 ::Display::Server::score score

    if { $x == "green" } {
      set offset 20
    } else {
      set offset 0
    }

    # we're creating a sorted version of $index here

    for { set i 1} { $i < $count } { incr i } {
      if { int($score($index($i))) > int($score($index([ expr { $i - 1 }]))) } {
        set j $i
        set t $index($i)
        set found 0

        while { $found == 0 } {
          set j [ expr { $j - 1 } ]
          set index([ expr { $j + 1 } ]) $index($j)
          if { $j == 0 } {
            set found 1
          } else {
            if { int($score($index([ expr { $j - 1 } ])))
                 >= int($score($t)) } {
              set found 1
            }
          }
          set index($j) $t
        }
      }
    }

    for { set i 0 } { $i < $count } { incr i } {
      set f [ expr { $index($i) } ]

      foreach y { score } {
        variable ${y}_$x
        upvar 0 ${y}_$x stuff
        upvar 0 ::Display::Server::$y source

        if { ! [ info exists stuff($i) ] } {
          set stuff($i) ""
        }

        if { $stuff($i) != $source($f) } {
          set stuff($i) $source($f)
        }
      }

      foreach y { name } {
        variable ${y}_$x
        upvar 0 ${y}_$x stuff
        upvar 0 ::Ginfo::$y source

        if { ! [ info exists stuff($i) ] } {
          set stuff($i) ""
        }

        if { $stuff($i) != $source($f) } {
          set stuff($i) $source($f)
        }
      }     
    } 
  }
}

proc dm_GAME_update { { chain yes } } {    
  variable score_root
  variable count_red
  variable count_green
  variable score_red
  variable score_green
  variable sort_red
  variable sort_green
  variable on_color

  SortScores

  # grub through and update base chicklets
  foreach x { red green } {
    upvar 0 count_$x count
    upvar 0 sort_$x sort

    if { ! [ info exists on_color($x) ] } {
      if { ( $count > 0 ) && [ winfo exists $score_root.score.$x.pl0.base ] } {
        set on_color($x) [ $score_root.score.$x.pl0.base cget -foreground ]
      }
    }

    # timesaver
    if { [ winfo exists $score_root.score.$x.pl0.base ] } {
      for { set i 0 } { $i < $count } { incr i } {
        if { $Display::Server::basecount($sort($i)) } {
          $score_root.score.$x.pl$i.base configure -foreground $on_color($x)
        } else {
          $score_root.score.$x.pl$i.base configure -foreground [  
            $score_root.score.$x.pl$i.base cget -background ]
        }
      }
    }
  }

  if { ( $count_red >= 1 ) && ( $count_green >= 1 ) } { 
    if { ( $score_red(0) > $score_green(0) ) } {
      flasher::off $score_root.score.green.pl0.score
      flasher::off $score_root.score.green.pl0.name
      flasher::on $score_root.score.red.pl0.score
      flasher::on $score_root.score.red.pl0.name
  } elseif { ( $score_green(0) > $score_red(0) ) } {
      flasher::off $score_root.score.red.pl0.score
      flasher::off $score_root.score.red.pl0.name
      flasher::on $score_root.score.green.pl0.score
      flasher::on $score_root.score.green.pl0.name
    } else {
      flasher::off $score_root.score.red.pl0.score
      flasher::off $score_root.score.red.pl0.name
      flasher::off $score_root.score.green.pl0.score
      flasher::off $score_root.score.green.pl0.name
    }
  }
    
  if { ( $::Display::Server::teamscore(red) > 
         $::Display::Server::teamscore(green) ) } {
    flasher::off $score_root.score.green.teamscore.score
    flasher::on $score_root.score.red.teamscore.score
  } elseif { ( $::Display::Server::teamscore(red) <
               $::Display::Server::teamscore(green) ) } {
    flasher::on $score_root.score.green.teamscore.score
    flasher::off $score_root.score.red.teamscore.score
  } else {
    flasher::off $score_root.score.green.teamscore.score
    flasher::off $score_root.score.red.teamscore.score
  }    

  if { ( ( $::Display::Server::STATE == "GAME" ) ||
         ( $::Display::Server::STATE == "POSTGAME" ) ) &&
         ( $chain == "yes" ) } {
    after 500 dm_GAME_update
  }
}
