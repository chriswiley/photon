#!/usr/bin/env wish8.6
#
# $Log: cgdisplay,v $
#
# Revision 1.11 2001/05/03 05:00:00  reason
# Experimenting with changing winfo to info in places
#
# Revision 1.10  1999/02/13 01:36:55  banz
# *** empty log message ***
#
# Revision 1.9  1999/01/31 17:11:22  banz
# BETA RELEASE
#
# Revision 1.8  1998/12/15 05:19:13  banz
# spiffy-ized new screens
#
# Revision 1.7  1998/12/13 04:15:44  banz
# "displayviews" broken out
#
# Revision 1.6  1998/11/29 22:20:38  banz
# big "ALERT" thing
#
# Revision 1.5  1998/11/15 23:51:56  banz
# Flashing team & player high scores
# Play by play continues to be active during postgame
#
# Revision 1.4  1998/11/15 21:43:10  banz
# finisned team score support
#
# Revision 1.3  1998/11/15 21:14:23  banz
# single image idle screen
# countdown for pregame screen
# colors in hit-by-hit window
#
# Revision 1.2  1998/11/08 22:13:16  banz
# fixed RCS identifier
#
# Revision 1.1  1998/11/08 22:02:39  banz
# Initial revision
#
#

set rcsid { $Id: cgdisplay,v 1.10 1999/02/13 01:36:55 banz Exp $ }

package require Img
package require cmdline
package require Pgtcl
package require try
package require Tclx

namespace eval Conf {
  source /usr/photon/etc/game.conf
}

set options {
  {h "Enable HD mode."}
  {p "Also act as the post-game display."}
}

set usage ": cgdisplay \[options] filename ...\noptions:"

try {
  array set params [::cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
  puts $msg
  exit 1
}

if { ! $params(h) } {
  set hd_mode 0
  set viewable_top $Conf::v_top
  set viewable_height $Conf::v_height
  set viewable_left $Conf::v_left
  set viewable_width $Conf::v_width
  set defaults_file $Conf::displaydefaults
} else {
  set hd_mode 1
  set viewable_top $Conf::hd_top
  set viewable_height $Conf::hd_height
  set viewable_left $Conf::hd_left
  set viewable_width $Conf::hd_width
  set defaults_file $Conf::hd_displaydefaults
}

# load the X app defaults file
if [ file exists $defaults_file ] {
  if [ catch { option readfile $defaults_file startup } err ] {
	   puts stderr "error in $defaults_file: $err"
  }
}

source $Conf::gamepath/displayviews
source $Conf::gamepath/flasher
source $Conf::gamepath/helpers

proc debuglog { j } {
  puts "debug: $j"
}

proc warninglog { j } {
  puts "warning: $j"
}

namespace eval Display {
  source $::Conf::gamepath/display
}

namespace eval Ginfo { }
namespace eval Game { }

trace variable ::Display::Server::GT_time w GT_time_formatter

# preload images

if { "$argv" == "nopg" } {
  set noidle 1
} elseif { "$argv" != "" } {
  set screenpath $argv
  set noidle 0
} else {
  if { $hd_mode } {
    set screenpath $Conf::gamepath/cg_idle_hd
  } else {
    set screenpath $Conf::gamepath/cg_idle
  }
  set noidle 0
}

puts "preloading images..."

set imagepath "$Conf::gamepath/images"
if { $hd_mode == 0 } {
  set alertdir "$imagepath/alert/photon/vga"
} else {
  set alertdir "$imagepath/alert/photon/hd"
}

for { set x 0 } { $x < 31 } { incr x } {
  image create photo ::alert_count_$x -file $alertdir/$x.tif
}

foreach x { alert-blank alert-on background earthlings } {
  image create photo ::alert_$x -file $alertdir/$x.tif
}

proc GT_time_formatter { name name2 what } {
  upvar 0 $name GT_time    
  set ::GT_time_formatted [ format "%d:%02d" [ expr { $GT_time / 60 } ] \
      [ expr { $GT_time % 60 } ] ]    
}

set hold_time 0

proc setGameMode { mode } {
    
  set conn [ db_connect ]
    
  pg_select $conn "select name, descr, code, params from g_modes where \
      storeid = 0 and name = '$mode'" array {
	  set ::Game::code $array(code)
	  set ::Game::mode $array(name)
	  set ::Game::mode_descr $array(descr)
	  set ::Game::setparams $array(params)
  }
  
  pg_select $conn "select name, descr, code, params from g_modes where \
      storeid = $Conf::storeid and name = '$mode'" array {
	  set ::Game::code $array(code)
	  set ::Game::mode $array(name)
	  set ::Game::mode_descr $array(descr)
	  set ::Game::setparams $array(params)
  }
    
  namespace eval ::Game "source $Conf::modes/$::Game::code"
  namespace eval ::Game "Init $::Game::code"
  set ::Ginfo::mode $::Game::mode
  set ::Ginfo::length $::Game::Params::length
    
  pg_disconnect $conn  
}

wm geometry . \
    ${viewable_width}x${viewable_height}+${viewable_left}+${viewable_top}

. configure -width $viewable_width
. configure -height $viewable_height
. configure -borderwidth 0
. configure -background black 

proc ClientRead { sock } {  
  if { [ eof $sock ] } {
    # socket got closed
	  variable s
	  catch { close $s }
	  # begin the open loop again..
	  OpenSocket_Wrapper
	  return -code ok
  }  
  ::Display::ClientRead $sock 
}

proc DisplayMode { mode } {  
  variable current_mode
  variable current_parent

  if { ! [ info exists current_parent ] } {
	  set current_parent "."
  }

  if { $current_mode == $mode } {
	  return -code ok
  }

  # if the returned parent == current_parent, don't do the
  # destroy and re-grid, it could be bad...
   
  set new_parent [ dm_$mode {} ]
    
  if { $new_parent != $current_parent } {
	  if { [ winfo exists $current_parent ] && $current_mode != "" } {
	    destroy $current_parent
	  }
	
	  variable viewable_height
	  variable viewable_width

    if { [ winfo exists $new_parent ] } {
      place $new_parent -in . -x 0 -y 0 -width $viewable_width \
          -height $viewable_height -anchor nw
      set current_parent $new_parent
      set current_mode $mode
    }
  }
}

proc dm_IDLE { root } {
    
  variable viewable_width 
  variable viewable_height
  variable advert_image
  variable noidle
  variable last_idle
  variable hold_time
  
  trace vdelete ::Display::Server::play_by_play w dm_Game_Play_by_Play

  if { [ winfo exists $root.dmGAME ] } {
    if { $hold_time < [ clock seconds ] } {
      after 1000 [ list DisplayMode $::Display::Server::STATE ]
      return ${root}.dmGAME
    }
  }

  if { [ winfo exists $root.dmGAME ] && ( $noidle == 1 ) } {
	  set p $root.dmGAME
	  return $p
  }

  set p "$root.dmIDLE"

  dm_next_IDLE $p

  return $p
}


proc dm_next_IDLE { p } {

  variable last_idle
  variable viewable_width
  variable viewable_height
  variable frame_count
  variable screenpath
  variable idle_root
  
  if { $::Display::Server::STATE != "IDLE" } {
    return -code ok
  }
  
  if { ! [ info exists idle_root ] } {
    set idle_root $p
  } else {
    set p $idle_root
  }
  
  if { ! [ info exists frame_count ] } {
	  set frame_count 0
  } else {
	  set previous_frame $frame_count
	  incr frame_count
	  set frame_count [ expr $frame_count % 20 ]
  }

  if { ! [ winfo exists $p ] } {
	  frame $p -width $viewable_width -height $viewable_height
  }
   
  set r [ frame $p.frame$frame_count -width $viewable_width \
      -height $viewable_height ]

  # load in "list" of screens from $Conf::gamepath/cg_idle/*.tcl,
  # if last_idle exists, pick the "next one" after it, if not
  # pick the first.  Source it in in the namespace Idlescreen::,
  # then run Idlescreen::run <root>
  # before going to next mode, run Idlescreen::end

  set screens [ glob $screenpath/*.tcl ]
  set screens [ lsort $screens ]

  if { [ info exists last_idle ] } {
    set count [ llength $screens ]
    for { set x 0 } { $x <= $count } { incr x } {
      if { [ lindex $screens $x ] == $last_idle } {
	      incr x
	      break
      }
    }
    
    set x [ expr { $x % [ llength $screens ] } ]

    set script [ lindex $screens $x ]
  } else {    
    set script [ lindex $screens 0 ]    
  }
  
  if { [ info exists previous_frame ] } {
    ::Idlescreen::end $p.frame${previous_frame}
  }
  
  set last_idle $script
  
  catch { namespace delete ::Idlescreen }
  namespace eval ::Idlescreen [ list source $script ]

  set idle_window $r
  ::Idlescreen::run $r
  place $r -relx 0.0 -rely 0.0 -width $viewable_width -height $viewable_height  
}

proc dm_PREGAME { root } {
  
  variable hd_mode
  
  variable viewable_width
  variable viewable_height

  variable idle_window
  
  if { [ info exists idle_window ] } {    
    catch Idlescreen::end $idle_window
    unset idle_window
  }
  
  if { $hd_mode } {
    set r ${root}.c
    set p ${root}.c.dmPREGAME
    canvas ${root}.c -width $viewable_width -height $viewable_height  
    canvas $p -width 958 -height 720
    ${root}.c create window [ expr ( $viewable_width - 958 ) / 2 ] 0 \
        -window $p -anchor nw
  } else {
    set r ${root}.dmPREGAME
    set p $root.dmPREGAME
    canvas $p -width $viewable_width -height $viewable_height
  }

  $p create image 0 0 -image ::alert_background -anchor nw

  image create photo ::alert_image -height [ image height ::alert_alert-on ] \
      -width [ image width ::alert_alert-on ]
  ::alert_image copy ::alert_alert-on
  
  if { $hd_mode } {
    $p create image 247 39 -image ::alert_image -anchor nw
  } else {
    $p create image 145 0 -image ::alert_image -anchor nw
  }

  image create photo ::alert_count -height [ image height ::alert_count_30 ] \
      -width [ image width ::alert_count_30 ]
  ::alert_count copy ::alert_count_30

  if { $hd_mode } {
    $p create image 283 376 -image ::alert_count -anchor nw
  } else {
    $p create image 142 237 -image ::alert_count -anchor nw
  }

  if { $hd_mode } {
    $p create image 0 181 -image ::alert_earthlings -anchor nw
  } else {
    $p create image 0 97 -image ::alert_earthlings -anchor nw
  }
      
  trace variable ::Display::Server::GT_time w dm_PREGAME_time_update 

  dm_PREGAME_alert_flash

  return $r
}

proc dm_PREGAME_alert_flash { } {
    
  if { $::Display::Server::STATE == "PREGAME" } {
    variable alert_global
	
    if { ! [ info exists alert_global ] } {
	      set alert_global 1
    }
	
	  if { $alert_global == 1 } {
	    ::alert_image copy ::alert_alert-on
	    set alert_global 0
	  } else {
	    ::alert_image copy ::alert_alert-blank
	    set alert_global 1
	  }
	  after 500 dm_PREGAME_alert_flash
  }
}


proc dm_PREGAME_time_update { name name2 op } {
  if { ( $::Display::Server::STATE == "PREGAME" ) && 
	       $::Display::Server::GT_time >= 0 } {
    ::alert_count copy ::alert_count_$::Display::Server::GT_time
  } else {
	  trace vdelete ::Display::Server::GT_time w dm_PREGAME_time_update 
  }
}

proc dm_GAME { root } {
  
  set p $root.dmGAME
  variable count_red
  variable count_green
  variable sort_red
  variable sort_green
  variable viewable_width
  variable viewable_height
  variable hd_mode
  set i 0

  variable score_root
  
  set conn [ db_connect ]
  
  vwait ::Display::Server::gameid
  set gameid $::Display::Server::gameid
  
  set res [ my_pg_exec $conn "select * from g_data where id = $gameid \
      and storeid = $Conf::storeid" ]

  if { [ pg_result $res -numTuples ] != 1 } {
    puts "error loading game from database"
    pg_disconnect $conn
    return -code ok
  } 
  
  pg_result $res -tupleArray 0 gdata
  
  setGameMode $gdata(mode)
  
  set Ginfo::length $gdata(length)
  set Ginfo::team_red $gdata(red_teamname)
  set Ginfo::team_green $gdata(green_teamname)
    
  namespace eval ::Ginfo "$gdata(params)"
  
  for { set x 0 } { $x < 40 } { incr x } {
	  set ::Ginfo::used($x) 0
  }
    
  # load player information  
  pg_select $conn "select team, slot, name, idnum from g_players \
      where id = $gameid and storeid = $Conf::storeid and used " array {
    set adder [ expr { $array(team) * 20 } ]
	  set j [ expr { $array(slot) + $adder } ]
    set ::Ginfo::used($j) 1
	  set ::Ginfo::name($j) $array(name)
	  set ::Ginfo::id($j) $array(idnum)
  }    
    
  pg_disconnect $conn

  set c [ canvas $p -width $viewable_width -height $viewable_height \
      -relief flat -borderwidth 0 -highlightthickness 0 ]

  upvar 0 viewable_height vh
  upvar 0 viewable_width vw

  # plop game_display in it...
  
  frame $p.score -width $vw -height $vh
  game_display_setup $p
  
  set score_root $p

  dm_GAME_update

  $c create window 0 0 -anchor nw -window $p.score

  # status thingy stuff

  frame $p.status -borderwidth 0 -relief flat
  label $p.status.time -textvariable ::GT_time_formatted -width 5 \
      -borderwidth 0 -relief flat
  label $p.status.timelabel -text "Time Remaining:" -borderwidth 0 -relief flat
  place $p.status.time -relx 1.0 -rely 0.0 \
      -width [ winfo reqwidth $p.status.time ] -relheight 1.0 -anchor ne
  place $p.status.timelabel -x 0 -y 0 \
      -width [ winfo reqwidth $p.status.timelabel ] -relheight 1.0
  
  $p.status configure -width \
      [ expr [ winfo reqwidth $p.status.time ] + \
      [ winfo reqwidth $p.status.timelabel ] ]
  $p.status configure -height [ winfo reqheight $p.status.timelabel  ]

  set stheight [ expr [ winfo reqheight $p.status ] + 2 ]

  $c create window $vw [ expr $vh - 4 ] -width $vw -anchor se -window $p.status

  # play by play stuff
  
  frame $p.hbh -height \
      [ expr $vh - ( [ winfo reqheight $p.score ] + 20 ) - $stheight ] \
      -width $vw -borderwidth 0 -relief flat

  variable play_by_play_red   
  variable play_by_play_green 
  set play_by_play_red [ text $p.hbh.red -borderwidth 0 -relief flat -highlightthickness 0 ]
  set play_by_play_green [ text $p.hbh.green -borderwidth 0 -relief flat -highlightthickness 0 ]
  
  if { $hd_mode } {
    dm_Build_Radio [ frame $p.hbh.radio -relief flat ]
  }
  
  trace variable ::Display::Server::play_by_play w dm_Game_Play_by_Play
  
  $play_by_play_red tag configure red -foreground "#ff8888"
  $play_by_play_red tag configure green -foreground "#88ff88"
  $play_by_play_red tag configure justify -justify left
  
  $play_by_play_green tag configure red -foreground "#ff8888"
  $play_by_play_green tag configure green -foreground "#88ff88"
  $play_by_play_green tag configure justify -justify right
  
  if { $hd_mode } {
     place $p.hbh.red -relx 0.05 -y 0 -height [ winfo reqheight $p.hbh ] \
         -relwidth 0.30
     place $p.hbh.radio -relx 0.40 -height [ winfo reqheight $p.hbh ] \
         -relwidth 0.20     
     place $p.hbh.green -relx 0.65 -y 0 -height [ winfo reqheight $p.hbh ] \
         -relwidth 0.30
   } else {
     place $p.hbh.red -relx 0.0 -y 0 -height [ winfo reqheight $p.hbh ] \
         -relwidth 0.48
     place $p.hbh.green -relx 0.51 -y 0 -height [ winfo reqheight $p.hbh ] \
         -relwidth 0.48
   }
   
  set pbp_window [ $c create window 0 \
      [ expr 5 + [ winfo reqheight $p.score ] ] -window $p.hbh -anchor nw ]
  
  return $p

}

proc dm_Build_Radio { frame } {
  set row 0
  set col 0
  
  proc rx_col { color slots } {
    upvar row row
    upvar col col
    upvar r r
    upvar frame frame
    set row 0
    foreach a $slots {
      label ${frame}.${a} -foreground $color \
          -textvariable ::Display::Server::radiodata_rx_x($a) -width 3
      grid ${frame}.${a} -row [incr row] -column $col
    }
    incr col
  }

  proc tx_col { slots } {
    upvar row row
    upvar col col
    upvar frame frame
    set row 0
    foreach a $slots {
      label ${frame}.${a} \
         -textvariable ::Display::Server::radiodata_tx_x($a) -width 3
      grid ${frame}.${a} -row [incr row] -column $col
    }
    incr col
  }
    
  tx_col {0}
  rx_col "#ff8888" {5 6 7 8 9 10 11 12 13 14}
  rx_col "#ff8888" {15 16 17 18 19 20 21 22 23 24}
  tx_col {25 26 27 28 29}
  rx_col "#88ff88" {31 32 33 34 35 36 37 38 39 40}
  rx_col "#88ff88" {41 42 43 44 45 46 47 48 49 50}
  tx_col {55 56 57 58 59}
}

proc dm_Game_Play_by_Play { name name2 op } {
  if { $::Display::Server::STATE == "GAME" } {

	variable play_by_play_red
  variable play_by_play_green
	
	foreach x $::Display::Server::play_by_play {
	  # tokenize, and for each element in the list, do the
	  # appropriate replacement
	  set l [ split $x " " ]
    # default is red.
    upvar 0 play_by_play_red windowvar
    set picked 0
    foreach y $l {
	    if { [ regexp -nocase {^%([0-9]+)%$} $y match what ] } {
	      if { $what < 20 } {
		      set color { red justify }
          if { $picked == 0 } {
            upvar 0 play_by_play_red windowvar
        	  $windowvar insert end "\n" { justify }            
            set picked 1
          }
	      } else {
          set color { green justify }
          if { $picked == 0 } {
            upvar 0 play_by_play_green windowvar
        	  $windowvar insert end "\n" { justify }          
            set picked 1
          }
	      }
	      $windowvar insert end "$::Ginfo::name($what) " $color
	    } else {
	      $windowvar insert end "$y " { justify }
		  }
	  }
	#  $windowvar insert end "\n" { justify }
	}

	set ::Display::Server::play_by_play ""
	$play_by_play_green see end
  $play_by_play_red see end
  }
}

proc dm_POSTGAME { root } {
  # when we're in postgame, we still listen to score updates (just
  # like in game)...  HOWEVER!!!  the status line should just
  # say "game completed" or something...

  # we make a new frame, and stick dm_GAME in it...
  
  variable hold_time
  set hold_time [ expr [ clock seconds ] + 30 ]
  
  set p $root.dmGAME

  foreach x [ winfo children $p.status ] {
    destroy $x
  }

  label $p.status.terminated
  pack $p.status.terminated
  
  return $p
}

proc ChangeState { name name2 op } {
  DisplayMode $::Display::Server::STATE
}

proc OpenSocket_Wrapper { } {
  if { [ catch { OpenSocket } err ] } {
    puts "failed on opensocket..., $err"
    after 1000 OpenSocket_Wrapper
    return -code ok
  }
}

proc OpenSocket { } {
  global s
  global go
  
  trace vdelete ::Display::Server::STATE w ChangeState
  
  set s [ socket $::Conf::server_name $::Conf::disp_listenport ]
  
  fconfigure $s -buffering line
  fconfigure $s -blocking 1
  
  fileevent $s readable [ list ClientRead $s ]

  # suck up current data, so we have some place to start
  net_write $s "UPDATE"
  net_write $s "STATUS"
  
  vwait ::Display::Server::STATE
  
  net_write $s "MODE STREAM"
  net_write $s "SUB STATUS"
  net_write $s "SUB GAME"
  net_write $s "SUB RADIO"
  
  # initial setups
  DisplayMode $::Display::Server::STATE
  
  trace variable ::Display::Server::STATE w ChangeState
  
  set go 1
}

set go 0
set current_mode ""

OpenSocket_Wrapper

