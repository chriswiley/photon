#!/usr/bin/env wish8.6

set rcsid { $Id: et,v 1.4 1999/02/13 01:35:00 banz Exp banz $ }

package require Pgtcl

namespace eval Conf {
  source /usr/photon/etc/game.conf
}

source $Conf::gamepath/helpers
source $Conf::gamepath/photon_vals
source $Conf::gamepath/photon_interfaces
source $Conf::gamepath/irlib
source $Conf::gamepath/version

if [ file exists $Conf::etdefaults ] {
  if [ catch { option readfile $Conf::etdefaults startup } err ] {
    puts stderr "error in $Conf::appdefaults: $err"
  }
}

wm title . "Entry Terminal: $::version::version_string"
wm resizable . 0 0
wm positionfrom . program
wm geometry . ${::Conf::et_xres}x${::Conf::et_yres}+0+0

namespace eval ::Game {
    source $Conf::modes/null    
}

namespace eval ::Ginfo {
    set trackname "RANDOM"
}

# set name & id traces so they're kept to the appropriate values
for { set x 0 } { $x < 40 } { incr x } { 
    set codename_update($x) 0
}

# simple debug & warning log functions
proc debuglog { j } {
  puts "debug: $j"
}

proc warninglog { j } {
  puts "warning: $j"
  set Message "warning: $j"
}

# Load a game mode from the database.
proc setGameMode { mode } {
  set conn [ db_connect ]
    
  pg_select $conn "select name, descr, code, params from g_modes where \
      storeid = 0 and name = '$mode'" array {
    set ::Game::code $array(code)
    set ::Game::mode $array(name)
    set ::Game::mode_descr $array(descr)
    set ::Game::setparams $array(params)
  }
    
  pg_select $conn "select name, descr, code, params from g_modes where \
      storeid = $Conf::storeid and name = '$mode'" array {
    set ::Game::code $array(code)
    set ::Game::mode $array(name)
    set ::Game::mode_descr $array(descr)
    set ::Game::setparams $array(params)
  }
    
  namespace eval ::Game [ list source $Conf::modes/$::Game::code ]
  namespace eval ::Game [ list Init $::Game::code ]
  set ::Ginfo::mode $::Game::mode
  set ::Ginfo::length $::Game::Params::length

  pg_disconnect $conn
}

# Reset game parameters to defaults.
proc InitGame { } {
  namespace eval ::Ginfo { 
    for { set i 0 } { $i < 40 } { incr i } {
      set name($i) ""
      set id($i) ""
      set used($i) 0
    }
    set redteamname "ALPHA  RED"
    set greenteamname "ALPHA  GRN"
    set trackname "RANDOM"
  }
  setGameMode $::Conf::default_game_mode
}

InitGame

# Install watches on codename & passport numbers to keep them legal.
namespace eval ::Ginfo {
  proc FixName { varName index op } {
    upvar $varName var
    regsub -all {[\\\'\"]} "$var($index)" "" var($index)
    if { [ string length "$var($index)" ] > 15 } {
      set var($index) [ string range "$var($index)" 0 14 ]
    }
  }
  proc FixId { varName index op } {
    upvar $varName var
    regsub -all {[^0-9]} "$var($index)" "" var($index)  
  
    if { [ string length "$var($index)" ] > 10 } {
      set var($index) [ string range "$var($index)" 0 9 ]
    }
  } 
  trace variable name w ::Ginfo::FixName
  trace variable id w ::Ginfo::FixId
}

::IrLib::ir_setup $Conf::ettty

. config -background black 

set Message "initializing..."

frame .contents -background black
label .message -textvariable Message

pack .contents 
pack .message -side bottom -fill both

set Ginfo::gameid -1

proc ButtonMenuExec { button } {    
    $button flash
    $button invoke
}

proc ButtonMenu { functionlist functionname } {
    destroy .buttonmenu 
    frame .buttonmenu -height 70
    
    for { set i 1 } { $i < 13 } { incr i } {
      set bindstring "<F$i>"
      set fname [ lindex $functionname $i ]
      set ftitle [ lindex $functionlist $i ]
  
      if { $fname == "" } {
        set bname "nullop$i"            
      } else {
        set bname $fname 
        button .buttonmenu.$bname -command $fname -text "F$i \n$ftitle"
        place .buttonmenu.$bname -in .buttonmenu \
            -relx [ expr ( 1.0 / 12.0 ) * ( $i - 1 )] \
            -relwidth [ expr ( 1.0 / 12.0 ) ] \
            -rely 0.0 -bordermode inside -relheight 1
        bind . $bindstring "ButtonMenuExec .buttonmenu.$bname"
      }
    }
    pack .buttonmenu -expand true -fill x -side bottom -anchor s
}


set std_functionlist { 
    ""
    "Edit\nGame"
    "Game\nParameters"
    "Start\nGame"
    ""
    ""
    "Insert"
    "IR Tester"
    "View\nGame"
    "Delete"
    "Flick\nSync"
    ""
    "Clear\nGame"
}

set std_functionname {
    ""
    "goto_EditGame"
    "goto_GameParameters"
    "goto_StartGame"
    ""
    ""
    "currentF6"
    "irTestMenu"
    "goto_ViewCurrentGame"
    "currentF9"
    "goto_FlickSync"
    ""
    "goto_ClearGame"
}

if { $Conf::enable_et_flicksync == "false" } {
  lset std_functionlist 10 ""
  lset std_functionname 10 ""
}

ButtonMenu $std_functionlist $std_functionname

set Message "Select a function from the menu \[$::version::version_string\]"

bind all <Control-g> { Barcode_Scan %W }
bind all <Control-G> { Barcode_Scan %W }

proc currentF6 { } {
  event generate . <KP_Insert>
  return -code ok
}

proc currentF9 { } {
  event generate . <KP_Delete>
  return -code ok
}

proc Barcode_Scan { widget } {
  variable Barcode_Scan_Binding
  variable Barcode_Get_Code
  variable Barcode_OldFocus
  variable Barcode_OldGrab
  variable Barcode_OldGrabType

  set Barcode_Get_Code ""
  set Barcode_OldFocus [ focus ]
    
  focus -force .
  grab .

  set Barcode_Scan_Binding [ bind . <KeyPress> [ list Barcode_Get $widget %K ] ]
}

proc Barcode_Get { widget scancode } {
  variable Barcode_Get_Code
  variable Barcode_OldFocus
  variable Barcode_OldGrab
  variable Barcode_OldGrabType
  variable Barcode_DoitFunction
  variable Barcode_InFunctionLock

  if { ! [ info exists Barcode_InFunctionLock ] } {
    set Barcode_InFunctionLock 0
  }

  if { ( $scancode != "Control_L" ) && ( $scancode != "Return" ) &&
       ( $scancode >= "0" ) && ( $scancode <= "9" ) } {
    set Barcode_Get_Code "${Barcode_Get_Code}$scancode"
  } elseif { ( $scancode == "Return" ) } {
    bind . <KeyPress> {}
    focus -force $Barcode_OldFocus

    if { [ info exists Barcode_DoitFunction ] } {
      if { $Barcode_InFunctionLock == 0 } {
        set Barcode_InFunctionLock 1
        $Barcode_DoitFunction $widget $Barcode_Get_Code
        set Barcode_Get_code ""
        set Barcode_InFunctionLock 0
      } 
    }
  } else {
    return
  }    
  return -code break ""
}

# Loads an existing game from the database (used for pre-booked games)
proc LoadGame { gameid } {
  global team_red
  global team_green

  variable old_game
  variable old_state
  # clear out the previous game...
  InitGame
  set conn [ db_connect ]
  if { [ info exists old_game ] } {
    # if the previous game we were editing is in the
    # ETING state, change it back to it's old state
    my_pg_exec $conn "update g_data set state = '$old_state' where \
        id = $old_game and storeid = $Conf::storeid and state = 'ETING'"
  }
  
  set Ginfo::gameid $gameid

  set res [ my_pg_exec $conn "select * from g_data where id = $gameid \
      and storeid = $Conf::storeid" ]

  if { [ pg_result $res -numTuples ] != 1 } {
    pg_disconnect $conn
    puts "Could not get game from database"
  }

  # set game to "ETING"
  my_pg_exec $conn "update g_data set state='ETING' where id = $gameid \
      and storeid = $Conf::storeid"  

  pg_result $res -tupleArray 0 gdata

  setGameMode $gdata(mode)
  set Ginfo::trackname $gdata(trackname)
  set Ginfo::length $gdata(length)
  set team_red $gdata(red_teamname)
  set team_green $gdata(green_teamname)

  set old_game $gdata(id)
  set old_state $gdata(state)

  namespace eval ::Game::Params "$gdata(params)"

  for { set x 0 } { $x < 40 } { incr x } {
    set ::Ginfo::used($x) 0
  }

  # load player information

  pg_select $conn "select team, slot, name, idnum from g_players \
      where id = $gameid and storeid = $Conf::storeid and used " array {
    set gslot [ ::Photon::ts_to_gs $array(slot) $array(team) ]
    set ::Ginfo::name($gslot) $array(name)
    set ::Ginfo::id($gslot) $array(idnum)
  }    

  pg_disconnect $conn

  return $gameid
}

proc FlickSync { } {
  global Message

  set Message "Connecting to Game Computer..."
  
  if { [ catch "socket $::Conf::server_name $::Conf::et_listenport" s ] } {
    set Message "Error connecting to Game Computer"
  } else {
    fconfigure $s -buffering line
    set Message "Sending FLICK command to Game Computer..."
    net_write $s "FLICK"

    global finalcode
    set finalcode 0

    fileevent $s readable [ list ET_client_flick $s ]
    vwait finalcode
    close $s
  }
}

   
proc BeginGame { } {  
  variable begingamelock
  variable codename_update
  
  if { [ info exists begingamelock ] && ( $begingamelock == 1 ) } {
    return -code ok
  }

  set begingamelock 1

  global Message
  
  # connect, and place game information in database
  set conn [ db_connect ]
  
  if { $Ginfo::gameid == -1 } {
    # get next game ID from sequence
    set res [ pg_exec $conn "select nextval('gameid')" ]
    set ntups [ pg_result $res -numTuples ]

    if { $ntups != 1 } {
      set Message "Error creating next game in database."
      set begingamelock 0
      pg_disconnect $conn
      return
    }

    set Ginfo::gameid [ pg_result $res -getTuple 0 ]
  }
  
  set Ginfo::modtime [ SqlTime [ clock seconds ] ]
  set Ginfo::state "RUNNABLE"
  set Ginfo::params ""

  setTrackName "$Ginfo::trackname"

  foreach x $Game::paramslist {
    if { "$x" != "" } {
      upvar 0 ::Game::Params::$x t
      append Ginfo::params "set \"$x\" \"$t\";"
    }
  }

  my_pg_exec $conn "delete from g_data where id = $Ginfo::gameid \
      and storeid = $Conf::storeid"
  
  # inserto the game information
  my_pg_exec $conn "insert into g_data ( id, modtime, state, mode, length, \
      params, red_teamname, green_teamname, storeid, trackname) \
      values ( $Ginfo::gameid, '$Ginfo::modtime', 'ETING', '$Ginfo::mode', \
      $Ginfo::length, '$Ginfo::params', '$Ginfo::redteamname', \
      '$Ginfo::greenteamname', $Conf::storeid, '$Ginfo::track' )"
  
  my_pg_exec $conn "delete from g_players where id = $Ginfo::gameid and \
      storeid = $Conf::storeid"
 
  for { set x 0 } { $x < 40 } { incr x } {
    if { $x < $::Photon::PLAYERS_PER_TEAM } {
      set color red
      set colornum 0
      set slot $x
    } else {
      set color green
      set colornum 1
      set slot [ expr $x - $::Photon::PLAYERS_PER_TEAM ]
    }
  
    if { $Ginfo::used($x) == 1 } {
      my_pg_exec $conn  "insert into g_players (id, storeid, used, team, slot, \
          name, idnum ) values ( $Ginfo::gameid, $Conf::storeid, \
          [ int_as_bool $Ginfo::used($x) ], $colornum, $slot, \
          '$Ginfo::name($x)', '$Ginfo::id($x)' )"
      
      if { ( $codename_update($x) > 0 ) && ( "$Ginfo::id($x)" != "" ) } {
        set result [ pg_exec $conn "select alias from member where \
            memberid = '$Ginfo::id($x)'" ]
        if { [ pg_result $result -numTuples ] != 1 } {
          pg_exec $conn "insert into member ( memberid, alias ) \
              values ( '$Ginfo::id($x)', '$Ginfo::name($x)')"
        } else {
          pg_exec $conn "update member set alias = '$Ginfo::name($x)' \
              where memberid = '$Ginfo::name($x)'"
        }
        set codename_update($x) 0
      }
    }
  }

  my_pg_exec $conn "update g_data set state='RUNNABLE' where storeid = \
      $Conf::storeid and id = $Ginfo::gameid"

  set Message "Connecting to Game Computer..."
    
  if { [ catch "socket $::Conf::server_name $::Conf::et_listenport" s ] } {
    set Message "Error connecting to Game Computer"
  } else {
    fconfigure $s -buffering line
    my_pg_exec $conn "update g_data set state='RUNNABLE' where \
        storeid = $Conf::storeid and id = $Ginfo::gameid"

    set Message "Sending start command to Game Computer..."
    net_write $s "START $Ginfo::gameid"

    global finalcode
    set finalcode 0

    fileevent $s readable [ list ET_client_start $s ]

    vwait finalcode
  
    if { $finalcode >= 500 } {
      my_pg_exec $conn "update g_data set state='ETING' where storeid = \
          $Conf::storeid and id = $Ginfo::gameid"
    }
  
  close $s
  }

  pg_disconnect $conn
  set begingamelock 0    
}

proc ET_client_flick { s } {
  global Message
  global finalcode

  if { [ eof $s ] } {
    set finalcode "000"
  }

  if { [ gets $s line ] < 0 } {
  } else {
    set e [ split $line {} ]     
    set code [ join [ lrange $e 0 2 ] "" ]
    set message [ join [ lrange $e 4 end ] "" ]
    if { [ lindex $e 3 ] == "-" } {
      set cont 1
    } else {
      set cont 0
    }
  
    set Message "$code : $message"
    
    if { $cont == 0 } {
      set finalcode $code
    }
  }
}

proc ET_client_start { s } {

  global Message
  global finalcode

  if { [ eof $s ] } {
    set finalcode "000"
  }

  if { [ gets $s line ] < 0 } {
  } else {
    set e [ split $line {} ]     
    set code [ join [ lrange $e 0 2 ] "" ]
    set message [ join [ lrange $e 4 end ] "" ]
    if { [ lindex $e 3 ] == "-" } {
      set cont 1
    } else {
      set cont 0
    }
  
    if { $code == 501 } { 
      set Message "$code : $message"
    } elseif { $code == 502 } {
      set Message "$code : $message"
    } elseif { $code == 100 } {
      set Message "$code : $message"
      set Ginfo::gameid -1
    }
  
    if { $cont == 0 } {
      set finalcode $code
    }
  }
}

proc EditGameParameters { toplevel } {
  
  set bigtoplevel $toplevel
  variable game_descr

  destroy $toplevel.params

  set t [ frame $toplevel.params ]

  # game mode
  frame $t.mode
  label $t.mode.label -text "Game Mode:"
  menubutton $t.mode.mb -textvariable Game::mode_descr -menu $t.mode.mb.menu
  set m [ menu $t.mode.mb.menu -tearoff 0 ]
  foreach x [ get_GameModes ] {
    $m add command -label "$game_descr($x)" -command \
        "setGameMode \"$x\";ParamsEditor $t.params.stuff"
  }

  pack $t.mode.mb $t.mode.label -side right
  pack $t.mode -side top -pady 5 -expand y -fill y

  # game track
  frame $t.track
  label $t.track.label -text "Game Soundtrack:"    
  menubutton $t.track.mb -textvariable ::Ginfo::trackname -menu $t.track.mb.menu
  set m [ menu $t.track.mb.menu -tearoff 0 ]
  $m add command -label "RANDOM" -command [ list setTrackName RANDOM ]
  # $m add command -label "CD" -command [ list setTrackName "CD" ]
  foreach x [ get_TrackNames ] {
    $m add command -label "$x" -command [ list setTrackName "$x" ]
  }
  entry $t.track.number -textvariable ::Ginfo::tracknum -width 2

  pack $t.track.number $t.track.mb $t.track.label -side right
  pack $t.track -side top -pady 5 -expand y

  
  frame $t.length
  label $t.length.label -text "Game Length:"
  radiobutton $t.length.30sec -text "30sec" -value 30 \
      -variable ::Ginfo::length
  radiobutton $t.length.2min -text "2 min" -value 120 \
      -variable ::Ginfo::length
  radiobutton $t.length.6min -text "6 min" -value 360 \
      -variable ::Ginfo::length
  radiobutton $t.length.10min -text "10 min" -value 600 \
      -variable ::Ginfo::length
  radiobutton $t.length.12min -text "12 min" -value 720 \
      -variable ::Ginfo::length
  radiobutton $t.length.15min -text "15 min" -value 870 \
      -variable ::Ginfo::length
  radiobutton $t.length.20min -text "20 min" -value 1200 \
      -variable ::Ginfo::length
  radiobutton $t.length.1hr -text "1 hr" -value 3600 \
      -variable ::Ginfo::length

  pack $t.length.label $t.length.30sec $t.length.6min  $t.length.1hr -side left
  
  pack $t.length -side top -pady 5 -expand y

  frame $t.params -width 700 -height 500
  label $t.params.title -text "Parameters"
  pack $t.params.title -side top -expand y

  frame $t.params.stuff -width 700

  pack $t.params.stuff
  pack $t.params
  pack $t -expand y -fill both

  ParamsEditor $t.params.stuff
}


proc ParamsEditor { path } {
  set y 0
  if { ! [ winfo exists $path ] } {
    return -code ok
  }
  
  foreach x [ winfo children $path ] {
    destroy $x
  }

  canvas $path.canvas -yscrollcommand [ list $path.yscroll set ]
  scrollbar $path.yscroll -orient vertical -command [ list $path.canvas yview ]
  
  pack $path.yscroll -side right -fill y
  pack $path.canvas -side left -fill both -expand true

  frame $path.canvas.stuff

  $path.canvas create window 0 0 -anchor nw -window $path.canvas.stuff

  foreach x $::Game::paramslist { 
    label $path.canvas.stuff.p${y}label -text "$x"
    entry $path.canvas.stuff.p${y}value -textvariable ::Game::Params::$x \
        -width 5
    grid $path.canvas.stuff.p${y}label -column 0 -row $y
    grid $path.canvas.stuff.p${y}value -column 1 -row $y
    incr y
  }
    
  tkwait visibility $path.canvas

  set width [ winfo reqwidth $path.canvas.stuff ]
  set height [ winfo reqheight $path.canvas.stuff ]
  $path.canvas config -scrollregion "0 0 $width $height"
  $path.canvas config -width $width
}
  

proc setTrackName { name } {

  if { $name == "CD" } {
    set ::Ginfo::track "CD Track $::Ginfo::tracknum"
  } else {
    set ::Ginfo::track "$name"
  }
  set ::Ginfo::trackname "$name"  
}

proc PreEnter { toplevel } {
  variable preenter_games
  variable preenter_root
  variable preenter_slots
  variable preenter_list

  set preenter_list { }

  set bigtoplevel $toplevel
  
  set p [ frame $toplevel.preenter ]
  set preenter_root $p

  pack $p

  # display a list of:
  # game id
  # mode
  # length
  # red team
  # green team
  # color will be "grey/SCHEDULE, red/ETABLE"

  set widgets { id mode length red_teamname green_teamname }
  set head(id) "Game ID"
  set head(mode) "Game Mode"
  set head(length) "Game Length"
  set head(red_teamname) "Red Team"
  set head(green_teamname) "Green Team"

  set conn [ db_connect ]
  
  set j 0

  set c 0
  foreach x $widgets {      
    label $p.$x$j -text $head($x) -foreground "#ffffff"
    grid $p.$x$j -column $c -row $j
    incr c
  }

  incr j

  pg_select $conn "select * from g_data where storeid = $::Conf::storeid and \
      ( state = 'ETABLE' OR state = 'SCHEDULE' OR state = 'ETING' )" data {
    set c 0
    set s $data(state)
  
    set color(SCHEDULE) "#999999"
    set color(ETABLE) "#9999ff"
    set color(ETING) "#ff9999"

    foreach x $widgets {      
      label $p.$x$j -text $data($x) -foreground $color($s)
      grid $p.$x$j -column $c -row $j
      bind $p.$x$j <Button-1> [ list Preenter_Load $data(id) ]
      bind $p.$x$j <Return> [ list Preenter_Load $data(id) ]
      bind $p.$x$j <Up> [ list Preenter_Up $data(id) ]
      bind $p.$x$j <Down> [ list Preenter_Down $data(id) ]
      incr c
    }

    set preenter_games($data(id)) $j
    lappend preenter_list $data(id)

    if { $j == 1 } {
      Preenter_Goto $data(id)
    }

    incr j
  }
    
  pg_disconnect $conn  
}

proc Preenter_Load { id } {
  goto_EditGame  
  LoadGame $id
}

proc Preenter_Down { id } {
  variable preenter_current
  variable preenter_list
  if { $preenter_current < [ llength $preenter_list ] } {
    Preenter_Goto [ lindex $preenter_list $preenter_current ]
  }
}    

proc Preenter_Up { id } {
  variable preenter_current
  variable preenter_list

  if { $preenter_current > 1 } {
    Preenter_Goto [ lindex $preenter_list [ expr $preenter_current - 2 ] ]
  }

  return -code ok
}


proc Preenter_Goto { id } {
  
  variable preenter_current
  variable preenter_games
  variable preenter_root
  set p $preenter_root

  set widgets { id mode length red_teamname green_teamname }

  if { [ info exists preenter_current ] } {
    foreach x $widgets {
      if { [ winfo exists $p.$x$preenter_current ] } {
        $p.$x$preenter_current configure -background black
      }
    }
  }

  set i $preenter_games($id)
  
  foreach x $widgets {
    if { [ winfo exists $p.$x$i ] } {
      $p.$x$i configure -background "#444444"
    }
  }
  focus $p.$x$i
  set preenter_current $i
}

proc EditGame { toplevel } {
  set bigtoplevel $toplevel
  global game_descr
  variable EditToplevel

  destroy $toplevel.edit

  set toplevel [ frame $toplevel.edit ]
  set EditToplevel $toplevel

  pack $toplevel

  label $toplevel.title -text "Edit Current Game"

  frame $toplevel.mode
  frame $toplevel.red
  frame $toplevel.green    

  grid $toplevel.title -row 0 -column 0 -columnspan 2

  foreach color { red green } {

    for { set i 0 } { $i < $::Conf::max_etable_players } { incr i } {      
      frame $toplevel.$color.$i     
    
      set j [ ::Photon::ts_to_gs $i $color ]

      if { $::Ginfo::used($j) == 1 } {
        set state normal
      } else {
        set state disabled
      }
    
      if { "$color" == "green" } {
        set ci 1
        set bitmap "@$Conf::gamepath/images/ldblarrow.xbm"
      } elseif { "$color" == "red" } {
        set ci 0
        set bitmap "@$Conf::gamepath/images/rdblarrow.xbm"
      } else {
        return -code error "unknown error"
      }

      entry $toplevel.$color.$i.id -textvariable ::Ginfo::id($j) \
          -state $state -width 10
      entry $toplevel.$color.$i.name -textvariable ::Ginfo::name($j) \
          -state $state -width 15
      checkbutton $toplevel.$color.$i.enable -variable ::Ginfo::used($j) \
          -command "EditEnable $toplevel.$color.$i.id \
              $toplevel.$color.$i.name $ci $j" -text $i -state disabled

      label $toplevel.$color.$i.picker -bitmap $bitmap
      
      if { "$color" == "red" } {
        pack $toplevel.$color.$i.picker $toplevel.$color.$i.enable \
            $toplevel.$color.$i.id $toplevel.$color.$i.name -side left 
      } else {
        pack $toplevel.$color.$i.enable $toplevel.$color.$i.id \
            $toplevel.$color.$i.name $toplevel.$color.$i.picker -side left
      }
    
      foreach x { picker id name enable } {
        bind $toplevel.$color.$i.$x <Tab> { Edit_Tab %W }
        bind $toplevel.$color.$i.$x <Down> { Edit_DownArrow %W }
        bind $toplevel.$color.$i.$x <KP_Down> { Edit_DownArrow %W }
        bind $toplevel.$color.$i.$x <Up> { Edit_UpArrow %W }
        bind $toplevel.$color.$i.$x <KP_Up> { Edit_UpArrow %W }
        bind $toplevel.$color.$i.$x <KP_Insert> { Edit_Insert %W }
        bind $toplevel.$color.$i.$x <Insert> { Edit_Insert %W }
        bind $toplevel.$color.$i.$x <Delete> { Edit_Delete %W }
        bind $toplevel.$color.$i.$x <KP_Delete> { Edit_Delete %W }
        bind $toplevel.$color.$i.$x <Home> { Edit_Home %W }
        bind $toplevel.$color.$i.$x <KP_Home> { Edit_Home %W }        
      }

      bind Entry <Insert> { }
      bind Entry <KP_Insert> { }
      bind Entry <F6> { }
      bind Entry <Delete> { }
      bind Entry <KP_Delete> { }
      bind Entry <F9> { }

      bind $toplevel.$color.$i.picker <FocusIn> { Picker_Message }
      bind $toplevel.$color.$i.id <FocusIn> { Id_Message }
      bind $toplevel.$color.$i.name <FocusIn> "AutoLoad_Name $j\nName_Message"
      bind $toplevel.$color.$i.enable <FocusIn> { Enable_Message }
      bind $toplevel.$color.$i.name <Return> { Edit_DownArrow %W }
      bind $toplevel.$color.$i.name <KP_Enter> { Edit_DownArrow %W }
    
      grid $toplevel.$color.$i -row [ expr { $i + 1 } ] -column $ci
    }
 
  }

  entry $toplevel.red.teamname -textvariable ::Ginfo::redteamname -width 15
  entry $toplevel.green.teamname -textvariable ::Ginfo::greenteamname -width 15

  bind $toplevel.red.teamname <Down> { Edit_DownArrow %W }
  bind $toplevel.green.teamname <Down> { Edit_DownArrow %W }
  bind $toplevel.red.teamname <Tab> { Edit_Tab %W }
  bind $toplevel.green.teamname <Tab> { Edit_Tab %W }
  
  grid $toplevel.green.teamname -row 0 -column 0 -columnspan 3
  grid $toplevel.red.teamname -row 0 -column 0 -columnspan 3

  grid $toplevel.red -row 1 -column 0
  grid $toplevel.green -row 1 -column 1
  grid $toplevel.mode -row 2 -column 0 -columnspan 2

  label $toplevel.mode.label -text "Game Mode:"
  label $toplevel.mode.what -textvariable Game::mode_descr
  pack $toplevel.mode.label $toplevel.mode.what -side left
  focus $toplevel.red.0.picker
  Edit_SetCurrent 0 red
  
  variable Barcode_DoitFunction
  set Barcode_DoitFunction Edit_BarcodeRead

}

proc Edit_SetCurrent { num color } {

  variable cur_old_num
  variable cur_old_color
  variable EditToplevel

  if { [ info exists cur_old_num ] } {
    $EditToplevel.$cur_old_color.$cur_old_num.picker configure \
        -foreground [ $EditToplevel.$cur_old_color.$cur_old_num.picker \
            cget -background ]
  }

  $EditToplevel.$color.$num.picker configure -foreground "#ffffff"

  set cur_old_num $num
  set cur_old_color $color
}

proc Edit_Insert { widget } {
  # we re-use BarcodeRead here, and pass it an empty string...
  return [ catch [ list Edit_BarcodeRead "$widget" "" ] ]
}

proc Edit_Home { widget } {
  # if the slot has either a passport or code name, put it in the
  # then call ir_enterpod for it...
  set l [ split "$widget" "." ]

  variable EditToplevel

  for { set x 0 } { $x < [ llength $l ] } { incr x } {
    if { [ lindex $l $x ] == "red" } {
      set color "red"
      set ci 0
      set number [ lindex $l [ expr $x + 1 ] ]
      set rnumber $number
      break
    } elseif { [ lindex $l $x ] == "green" }  {
      set color "green"
      set ci 1
      set number [ lindex $l [ expr $x + 1 ] ]
      set rnumber [ expr $number + 20 ]
      break
    }
  }
    
  if { [ info exists color ] && ( ( $::Ginfo::id($rnumber) != "" ) \
      || ( $::Ginfo::name($rnumber) != "" ) ) } {
    set ::Ginfo::used($rnumber) 1
         
    EditEnable $EditToplevel.$color.$number.id \
        $EditToplevel.$color.$number.name $ci $rnumber
  
    EnterPod $ci $rnumber $::Game::Params::etmode
    focus $EditToplevel.$color.$number.name
  }
} 
     
proc Edit_Delete { widget } {

  set l [ split "$widget" "." ]

  variable EditToplevel

  for { set x 0 } { $x < [ llength $l ] } { incr x } {
    if { [ lindex $l $x ] == "red" } {
      set color "red"
      set ci 0
      set number [ lindex $l [ expr $x + 1 ] ]
      set rnumber $number
      break
    } elseif { [ lindex $l $x ] == "green" }  {
      set color "green"
      set ci 1
      set number [ lindex $l [ expr $x + 1 ] ]
      set rnumber [ expr $number + 20 ]
      break
    }
  }
    
  if { [ info exists color ] } {
    set ::Ginfo::used($rnumber) 0
    EditEnable $EditToplevel.$color.$number.id \
        $EditToplevel.$color.$number.name $ci $rnumber
  } 
}

proc Edit_BarcodeRead { widget code } {

  variable EditToplevel
  variable Edit_BarcodeReadLockout

  if { [ info exists Edit_BarcodeReadLockout ]  } {
    if { $Edit_BarcodeReadLockout == 1 } {
      return -code break
    }
  }
 
  set Edit_BarcodeReadLockout 1

  # logic:
  # if the passport is already here, we jump to it,
  # and to right to "enter pod"

  # if the passport ISN'T here, we jump to the least unused slot
  # in the current color!

  if { [ string length $code ] > 10 } {
    set code [ string range $code 0 9 ]
  }

  if { "$code" != "" } {

  for { set x 0 } { $x < 40 } { incr x } {
      
      if { "$Ginfo::id($x)" == "$code" } { 
        if { $x >= $::Photon::PLAYERS_PER_TEAM } {
          set color green
          set colorcode 1
          set i [ expr $x - 20 ]
        } else {
          set color red
          set colorcode 0
          set i $x
        }
    
        if { $Ginfo::used($x) } {  
          focus $EditToplevel.$color.$i.id
          catch [ list EditEnable $EditToplevel.$color.$i.id \
              $EditToplevel.$color.$i.name $colorcode $x ]
          # enter up pod
          EnterPod $colorcode $x $::Game::Params::etmode
          focus $EditToplevel.$color.$i.name
        } else {
          set Ginfo::used($x) 1
          catch [ list EditEnable $EditToplevel.$color.$i.id \
              $EditToplevel.$color.$i.name $colorcode $x ]
          set Edit_BarcodeReadLockout 0
          return [ catch [ list Edit_BarcodeRead $widget $code ] ]
        }
    
        set Edit_BarcodeReadLockout 0
        return
      }  
    }

    # second case we look for a slot in the current color that's free
  }

  foreach l [ split $widget "." ] {
    if { "$l" == "green" } { 
      set color green
      set colornum 1
    } elseif { "$l" == "red" } {
      set color red
      set colornum 0
    }
  }

  if { [ info exists color ] } {  
    if { $color == "green" } {
      set offset 20
    } else {
      set offset 0
    }
    for { set x $offset } \
        { $x < [ expr { $offset + $::Conf::max_etable_players } ] } { incr x } {
      set i [ expr { $x - $offset } ]
      if { ( $Ginfo::used($x) != 1 ) && ( "$Ginfo::id($x)" == "" ) } {
        if { "$code" != "" } {
          set Ginfo::used($x) 1
          set Ginfo::id($x) "$code"
          catch { AutoLoad_Name $x }
          catch [ list EditEnable $EditToplevel.$color.$i.id \
              $EditToplevel.$color.$i.name $colornum $x ]
          set Edit_BarcodeReadLockout 0
          return [ catch list [ Edit_BarcodeRead $widget "$code" ] ]
        } else {
          set Ginfo::used($x) 1
          catch [ list EditEnable $EditToplevel.$color.$i.id \
              $EditToplevel.$color.$i.name $colornum $x ]
          set Edit_BarcodeReadLockout 0
          return -code break
        }
      }
    }
  }

  set Edit_BarcodeReadLockout 0
  return -code break
}


proc Id_Message { } {   
  global Message
  set Message "Scan Passport Now"
}

proc Picker_Message { } {
  global Message
  set Message "<Delete> to remove player, <Insert> to add player, \
      <Home> to re-enter player"
}

proc Name_Message { } { 
    global Message
    set Message "Press Enter To Accept Codename"
}

proc Enable_Message { } { 
    global Message
    set Message "Press Enter To Add Player Here"
}

proc AutoLoad_Name { slot } {
  global Message
  variable codename_update
  
  if { $::Ginfo::name($slot) == "" } { 
    set Message "Querying database for codename"
    # connect, and place game information in database
    set conn [ db_connect ]

    # get next game ID from sequence

    set res [ pg_exec $conn "select alias from member \
        where memberid = '$::Ginfo::id($slot)'" ]
    set ntups [ pg_result $res -numTuples ]

    if { $ntups != 1 } {
      set Message "Cannot retrieve codename for id!"      
      pg_disconnect $conn
      incr codename_update($slot)
      return -code ok
    }

    set x [ join [ pg_result $res -getTuple 0 ] " " ]
    regsub -all {^ *} "$x" "" ::Ginfo::name($slot)

    pg_disconnect $conn
  }
}

# Returns the toplevel portion of an edit widget string
proc GetTopLevelFromEditWidget { widget } {
  if {[regsub {^(.*)\.(green|red)(.*)$} $widget {\1} toplevel] != 1} {
    return -code error "failed to get TopLevel from EditWidget $widget"
  }
  return $toplevel
}

# Returns a list of { color, slot, type } from the widget name
proc GetEditWidget { widget } {
  if {[regsub {^.*(green|red)(.*)$} $widget {\1\2} j] != 1} {
    return -code error "failed to extract widget specifics from $widget"
  }
  return [split $j .]
}

proc Edit_Move { widget direction change_color } {
  global edit_wishwhat
  if { ! [ info exists edit_wishwhat ] } { 
    set edit_wishwhat picker
  }

  set toplevel [GetTopLevelFromEditWidget $widget]
  set color [lindex [GetEditWidget $widget] 0]
  set slot [lindex [GetEditWidget $widget] 1]

  if { $slot == "teamname" } {
    if { $direction > 0 } {
      set slot 0
      set what $edit_wishwhat
    } else {
      set slot -1
    }
  } else {
    set slot [expr $slot + $direction]
    set what [lindex [GetEditWidget $widget] 2]
  }

  if { $change_color } {
    if { $color == "red" } {
      set color "green"
    } elseif { $color == "green" } {
      set color "red"
    } else {
      return -code error "unknown color $color"
    }
  }

  if { $slot < 0 } {
    set newwidget "${toplevel}.${color}.teamname"
    focus $newwidget
    return
  }

  if { $slot > $::Conf::max_etable_players - 1 } {
    set slot [expr $::Conf::max_etable_players - 1]
  }

  if { $what != "picker" } { 
    set edit_wishwhat $what
  }

  set gslot [::Photon::ts_to_gs $slot $color]

  if { $::Ginfo::used($gslot) } {
    set newwidget "$toplevel.$color.$slot.name"
  } else {
    set newwidget "$toplevel.$color.$slot.picker"
  }
  focus $newwidget
  Edit_SetCurrent $slot $color
  return
}

proc Edit_UpArrow { widget } { 
  return -code break [Edit_Move $widget -1 0]
}

proc Edit_DownArrow { widget } { 
  return -code break [Edit_Move $widget 1 0]
}

proc Edit_Tab { widget } { 
  return -code break [Edit_Move $widget 0 1]
}

proc Edit_LeftArrow { } { }
proc Edit_RightArrow { } { }

proc EditEnable { idwidget namewidget color number } {
  if { $::Ginfo::used($number) } {
    set oldfocus .
  
    $idwidget configure -state normal
    $namewidget configure -state normal
  
    bind $idwidget <Return> "EnterPod $color $number \
        $::Game::Params::etmode\nfocus $namewidget\n"
    bind $idwidget <KP_Enter> "EnterPod $color $number \
        $::Game::Params::etmode\nfocus $namewidget\n"
    
    bind $idwidget <Escape> "focus $oldfocus"
  
    bind $namewidget <Escape> "focus $oldfocus"
  
    focus $idwidget
  } else {
    bind $idwidget <Return> { }
    bind $idwidget <Escape> { }
    bind $namewidget <Return> { }
    bind $namewidget <Escape> { }

    set Ginfo::name($number) ""
    set Ginfo::id($number) ""

    $idwidget configure -state disabled
    $namewidget configure -state disabled
  }

  if { $color == 1 } {
    set c green
    set n [ expr { $number - 20 } ]
  } else {
    set c red
    set n $number
  }

  Edit_SetCurrent $n $c
}

proc EnterPod { team slot mode } {
  global cont 
  global Message

  if { [ winfo exists .enterpod ] } {
    return -code ok
  }
  
  set old [ focus ]
  set j [ toplevel .enterpod ]
  set j .enterpod

  wm title $j ""
  wm resizable $j 0 0
  wm transient $j .
  wm geometry $j +0+500

  set Message "Press enter when phaser is ready"

  label $j.label -text "Insert Phaser Now"
  pack $j.label
  
  tkwait visibility $j

  focus -force $j
  grab $j

  set cont 0

  bind $j <Return> { set cont 1 }
  bind $j <KP_Enter> { set cont 1 }
  bind $j <Escape> { set cont -1 }

  if { [ catch {
      ::IrLib::ir_enterpod $team [
          expr { $slot - ( $team * $::Photon::PLAYERS_PER_TEAM ) } ] $mode
    } err ] } {
    set Message "$err"  
  } else {
    set Message "Press enter when pod is activated"  
  }
  
  $j.label configure -text "Waiting for Pod Activation"
  focus -force $j.label
  
  set cont 0
  
  while { $cont == 0 } {
    tkwait variable cont
  }

  if { [ catch { ::IrLib::ir_stop } err ] } {
    set Message "$err"
  }
  
  grab release $j
  focus $old
  destroy .enterpod
}
    

proc irTestMenu { } {
  global irfunc

  set irfunc 0

  if { [ winfo exists .irtestmenu ] } {
    return -code ok
  }
  
  toplevel .irtestmenu

  bind .irtestmenu <Destroy> { 
    if { $irfunc } { 
      ::IrLib::ir_stop 
      set irfunc 0  
    }
  }

  
  set j .irtestmenu

  label $j.players -text "Player Codes"

  frame $j.red
  frame $j.green
  
  for { set i 0 } { $i < $::Photon::PLAYERS_PER_TEAM } { incr i } {

    set irval [ ::Photon::gs_to_ir [ ::Photon::ts_to_gs $i "red" ] ]

    radiobutton $j.red.$i -text $i -relief flat \
        -variable irfunc -value $irval \
        -command { ::IrLib::ir_sendbyte $irfunc }

    grid $j.red.$i -column 0 -row $i

    set irval [ ::Photon::gs_to_ir [ ::Photon::ts_to_gs $i "green" ] ]
  
    radiobutton $j.green.$i -text $i -relief flat \
        -variable irfunc -value $irval \
        -command { ::IrLib::ir_sendbyte $irfunc }

    grid $j.green.$i -column 0 -row $i
  
  }

  grid $j.players -row 0 -column 0 -columnspan 2
  grid $j.red -row 1 -column 0
  grid $j.green -row 1 -column 1


  label $j.targets -text "Target Codes"
  grid $j.targets -row 2 -column 0 -columnspan 2

  radiobutton $j.target -text "Target" -relief flat \
    -variable irfunc -value $::Photon::TARGET \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::TARGET) } ] }

  grid $j.target -row 3 -column 0 -columnspan 2

  radiobutton $j.rbase -text "Red Base" -relief flat \
    -variable irfunc -value $::Photon::RBASE \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::RBASE) } ] }
  radiobutton $j.rbase2 -text "Red BaseII" -relief flat \
    -variable irfunc -value $::Photon::RBASE2 \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::RBASE2) } ] }
  radiobutton $j.rtower -text "Red Tower" -relief flat \
    -variable irfunc -value $::Photon::RTOWER \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::RTOWER) } ] }
  radiobutton $j.gbase -text "Grn Base" -relief flat \
    -variable irfunc -value $::Photon::GBASE \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::GBASE) } ] }
  radiobutton $j.gbase2 -text "Grn BaseII" -relief flat \
    -variable irfunc -value $::Photon::GBASE2 \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::GBASE2) } ] }
  radiobutton $j.gtower -text "Grn Tower" -relief flat \
    -variable irfunc -value $::Photon::GTOWER \
    -command { ::IrLib::ir_sendbyte [ expr { int($::Photon::GTOWER) } ] }

  grid $j.rbase -row 4 -column 0
  grid $j.rbase2 -row 5 -column 0
  grid $j.rtower -row 6 -column 0
  
  grid $j.gbase -row 4 -column 1
  grid $j.gbase2 -row 5 -column 1
  grid $j.gtower -row 6 -column 1
}

proc goto_ViewCurrentGame { } {
  variable Message

  variable ResetScreen
  set ResetScreen 0

  set Message "Game display may take a few seconds to appear."
  foreach x [ winfo children .contents ] {
    destroy $x
  }

  frame .contents.stuff -container 1 -bd 4
  
  pack .contents.stuff

  exec /usr/local/bin/wish8.6 /usr/photon/bin/cgdisplay \
      -use [ winfo id .contents.stuff ] &
}

proc goto_ClearGame { } {
  set tl [toplevel .check]
  
  wm title $tl ""
  wm resizable $tl 0 0
  wm transient $tl .
  wm geometry $tl +100+100
  
  frame ${tl}.content
  pack ${tl}.content
  message ${tl}.content.text -text "Really Clear Game?"
  
  set yes_command "
    ReallyClearGame
    destroy ${tl}
  "
  set no_command "destroy ${tl}"
  
  button ${tl}.content.yes -text "Yes" -command "${yes_command}"
  button ${tl}.content.no -text "No" -command "${no_command}"

  pack ${tl}.content.text
  pack ${tl}.content.no ${tl}.content.yes -side left

  bind ${tl} <Y> "${yes_command}"
  bind ${tl} <y> "${yes_command}"
  bind ${tl} <N> "${no_command}"
  bind ${tl} <n> "${no_command}"
  
  focus ${tl}.content
}

proc ReallyClearGame { } {
  set Message "Clearing Game"
  variable ResetScreen
  set ResetScreen 0

  InitGame

  set Message "Game Cleared"
  
  goto_EditGame
}

proc ReallyClearGame { } {
  set Message "Clearing Game"
  variable ResetScreen
  set ResetScreen 0
  
  InitGame
  
  set Message "Game Cleared"
  
  goto_EditGame
}

proc goto_GameParameters { } {

  variable Barcode_DoitFunction
  variable ResetScreen
  set ResetScreen 1
  if { [ info exists Barcode_DoitFunction ] } {
    unset Barcode_DoitFunction
  }
  
  foreach x [ winfo children .contents ] {
    destroy $x
  }

  EditGameParameters .contents

}


     
proc goto_EditGame { } {

  variable ResetScreen 
  set ResetScreen 1

  foreach x [ winfo children .contents ] {
    destroy $x
  }

  EditGame .contents

}

proc goto_PreEnter { } {
  
  variable ResetScreen
  set ResetScreen 1
  foreach x [ winfo children .contents ] {
    destroy $x
  }
  PreEnter .contents
}


proc goto_FlickSync { } {
  FlickSync
}

proc goto_StartGame { } {
  variable ResetScreen
  variable Barcode_DoitFunction
  if { [ info exists Barcode_DoitFunction ] } {
    unset Barcode_DoitFunction
  }

  BeginGame

  foreach x [ winfo children .contents ] {
    if { $ResetScreen } {
      destroy $x
    }
  }
}

proc get_TrackNames { } {
  set conn [ db_connect ]

  set l { }
  pg_select $conn "select distinct name from g_tracks \
      where type != 'cd' ORDER BY name" array {
      lappend l "$array(name)"
  }
  pg_disconnect $conn
  return $l
}


proc get_GameModes { } {
  global game_descr
  set conn [ db_connect ]

  set l { }

  pg_select $conn "select name, descr from g_modes \
      where storeid = $Conf::storeid or storeid = 0" array {
    lappend l $array(name)
    set game_descr($array(name)) $array(descr)
  }

  pg_disconnect $conn

  return $l
}
